{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/home/unthinkable-lap-0268/Documents/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst readline = require('readline');\n\nconst chalk = require('chalk');\n\nconst cliCursor = require('cli-cursor');\n\nconst cliSpinners = require('cli-spinners');\n\nconst logSymbols = require('log-symbols');\n\nconst stripAnsi = require('strip-ansi');\n\nconst wcwidth = require('wcwidth');\n\nconst isInteractive = require('is-interactive');\n\nconst isUnicodeSupported = require('is-unicode-supported');\n\nconst {\n  BufferListStream\n} = require('bl');\n\nconst TEXT = Symbol('text');\nconst PREFIX_TEXT = Symbol('prefixText');\nconst ASCII_ETX_CODE = 0x03; // Ctrl+C emits this code\n\nclass StdinDiscarder {\n  constructor() {\n    this.requests = 0;\n    this.mutedStream = new BufferListStream();\n    this.mutedStream.pipe(process.stdout);\n    const self = this; // eslint-disable-line unicorn/no-this-assignment\n\n    this.ourEmit = function (event, data, ...args) {\n      const {\n        stdin\n      } = process;\n\n      if (self.requests > 0 || stdin.emit === self.ourEmit) {\n        if (event === 'keypress') {\n          // Fixes readline behavior\n          return;\n        }\n\n        if (event === 'data' && data.includes(ASCII_ETX_CODE)) {\n          process.emit('SIGINT');\n        }\n\n        Reflect.apply(self.oldEmit, this, [event, data, ...args]);\n      } else {\n        Reflect.apply(process.stdin.emit, this, [event, data, ...args]);\n      }\n    };\n  }\n\n  start() {\n    this.requests++;\n\n    if (this.requests === 1) {\n      this.realStart();\n    }\n  }\n\n  stop() {\n    if (this.requests <= 0) {\n      throw new Error('`stop` called more times than `start`');\n    }\n\n    this.requests--;\n\n    if (this.requests === 0) {\n      this.realStop();\n    }\n  }\n\n  realStart() {\n    // No known way to make it work reliably on Windows\n    if (process.platform === 'win32') {\n      return;\n    }\n\n    this.rl = readline.createInterface({\n      input: process.stdin,\n      output: this.mutedStream\n    });\n    this.rl.on('SIGINT', () => {\n      if (process.listenerCount('SIGINT') === 0) {\n        process.emit('SIGINT');\n      } else {\n        this.rl.close();\n        process.kill(process.pid, 'SIGINT');\n      }\n    });\n  }\n\n  realStop() {\n    if (process.platform === 'win32') {\n      return;\n    }\n\n    this.rl.close();\n    this.rl = undefined;\n  }\n\n}\n\nlet stdinDiscarder;\n\nclass Ora {\n  constructor(options) {\n    if (!stdinDiscarder) {\n      stdinDiscarder = new StdinDiscarder();\n    }\n\n    if (typeof options === 'string') {\n      options = {\n        text: options\n      };\n    }\n\n    this.options = {\n      text: '',\n      color: 'cyan',\n      stream: process.stderr,\n      discardStdin: true,\n      ...options\n    };\n    this.spinner = this.options.spinner;\n    this.color = this.options.color;\n    this.hideCursor = this.options.hideCursor !== false;\n    this.interval = this.options.interval || this.spinner.interval || 100;\n    this.stream = this.options.stream;\n    this.id = undefined;\n    this.isEnabled = typeof this.options.isEnabled === 'boolean' ? this.options.isEnabled : isInteractive({\n      stream: this.stream\n    });\n    this.isSilent = typeof this.options.isSilent === 'boolean' ? this.options.isSilent : false; // Set *after* `this.stream`\n\n    this.text = this.options.text;\n    this.prefixText = this.options.prefixText;\n    this.linesToClear = 0;\n    this.indent = this.options.indent;\n    this.discardStdin = this.options.discardStdin;\n    this.isDiscardingStdin = false;\n  }\n\n  get indent() {\n    return this._indent;\n  }\n\n  set indent(indent = 0) {\n    if (!(indent >= 0 && Number.isInteger(indent))) {\n      throw new Error('The `indent` option must be an integer from 0 and up');\n    }\n\n    this._indent = indent;\n  }\n\n  _updateInterval(interval) {\n    if (interval !== undefined) {\n      this.interval = interval;\n    }\n  }\n\n  get spinner() {\n    return this._spinner;\n  }\n\n  set spinner(spinner) {\n    this.frameIndex = 0;\n\n    if (typeof spinner === 'object') {\n      if (spinner.frames === undefined) {\n        throw new Error('The given spinner must have a `frames` property');\n      }\n\n      this._spinner = spinner;\n    } else if (!isUnicodeSupported()) {\n      this._spinner = cliSpinners.line;\n    } else if (spinner === undefined) {\n      // Set default spinner\n      this._spinner = cliSpinners.dots;\n    } else if (spinner !== 'default' && cliSpinners[spinner]) {\n      this._spinner = cliSpinners[spinner];\n    } else {\n      throw new Error(`There is no built-in spinner named '${spinner}'. See https://github.com/sindresorhus/cli-spinners/blob/main/spinners.json for a full list.`);\n    }\n\n    this._updateInterval(this._spinner.interval);\n  }\n\n  get text() {\n    return this[TEXT];\n  }\n\n  set text(value) {\n    this[TEXT] = value;\n    this.updateLineCount();\n  }\n\n  get prefixText() {\n    return this[PREFIX_TEXT];\n  }\n\n  set prefixText(value) {\n    this[PREFIX_TEXT] = value;\n    this.updateLineCount();\n  }\n\n  get isSpinning() {\n    return this.id !== undefined;\n  }\n\n  getFullPrefixText(prefixText = this[PREFIX_TEXT], postfix = ' ') {\n    if (typeof prefixText === 'string') {\n      return prefixText + postfix;\n    }\n\n    if (typeof prefixText === 'function') {\n      return prefixText() + postfix;\n    }\n\n    return '';\n  }\n\n  updateLineCount() {\n    const columns = this.stream.columns || 80;\n    const fullPrefixText = this.getFullPrefixText(this.prefixText, '-');\n    this.lineCount = 0;\n\n    for (const line of stripAnsi(fullPrefixText + '--' + this[TEXT]).split('\\n')) {\n      this.lineCount += Math.max(1, Math.ceil(wcwidth(line) / columns));\n    }\n  }\n\n  get isEnabled() {\n    return this._isEnabled && !this.isSilent;\n  }\n\n  set isEnabled(value) {\n    if (typeof value !== 'boolean') {\n      throw new TypeError('The `isEnabled` option must be a boolean');\n    }\n\n    this._isEnabled = value;\n  }\n\n  get isSilent() {\n    return this._isSilent;\n  }\n\n  set isSilent(value) {\n    if (typeof value !== 'boolean') {\n      throw new TypeError('The `isSilent` option must be a boolean');\n    }\n\n    this._isSilent = value;\n  }\n\n  frame() {\n    const {\n      frames\n    } = this.spinner;\n    let frame = frames[this.frameIndex];\n\n    if (this.color) {\n      frame = chalk[this.color](frame);\n    }\n\n    this.frameIndex = ++this.frameIndex % frames.length;\n    const fullPrefixText = typeof this.prefixText === 'string' && this.prefixText !== '' ? this.prefixText + ' ' : '';\n    const fullText = typeof this.text === 'string' ? ' ' + this.text : '';\n    return fullPrefixText + frame + fullText;\n  }\n\n  clear() {\n    if (!this.isEnabled || !this.stream.isTTY) {\n      return this;\n    }\n\n    for (let i = 0; i < this.linesToClear; i++) {\n      if (i > 0) {\n        this.stream.moveCursor(0, -1);\n      }\n\n      this.stream.clearLine();\n      this.stream.cursorTo(this.indent);\n    }\n\n    this.linesToClear = 0;\n    return this;\n  }\n\n  render() {\n    if (this.isSilent) {\n      return this;\n    }\n\n    this.clear();\n    this.stream.write(this.frame());\n    this.linesToClear = this.lineCount;\n    return this;\n  }\n\n  start(text) {\n    if (text) {\n      this.text = text;\n    }\n\n    if (this.isSilent) {\n      return this;\n    }\n\n    if (!this.isEnabled) {\n      if (this.text) {\n        this.stream.write(`- ${this.text}\\n`);\n      }\n\n      return this;\n    }\n\n    if (this.isSpinning) {\n      return this;\n    }\n\n    if (this.hideCursor) {\n      cliCursor.hide(this.stream);\n    }\n\n    if (this.discardStdin && process.stdin.isTTY) {\n      this.isDiscardingStdin = true;\n      stdinDiscarder.start();\n    }\n\n    this.render();\n    this.id = setInterval(this.render.bind(this), this.interval);\n    return this;\n  }\n\n  stop() {\n    if (!this.isEnabled) {\n      return this;\n    }\n\n    clearInterval(this.id);\n    this.id = undefined;\n    this.frameIndex = 0;\n    this.clear();\n\n    if (this.hideCursor) {\n      cliCursor.show(this.stream);\n    }\n\n    if (this.discardStdin && process.stdin.isTTY && this.isDiscardingStdin) {\n      stdinDiscarder.stop();\n      this.isDiscardingStdin = false;\n    }\n\n    return this;\n  }\n\n  succeed(text) {\n    return this.stopAndPersist({\n      symbol: logSymbols.success,\n      text\n    });\n  }\n\n  fail(text) {\n    return this.stopAndPersist({\n      symbol: logSymbols.error,\n      text\n    });\n  }\n\n  warn(text) {\n    return this.stopAndPersist({\n      symbol: logSymbols.warning,\n      text\n    });\n  }\n\n  info(text) {\n    return this.stopAndPersist({\n      symbol: logSymbols.info,\n      text\n    });\n  }\n\n  stopAndPersist(options = {}) {\n    if (this.isSilent) {\n      return this;\n    }\n\n    const prefixText = options.prefixText || this.prefixText;\n    const text = options.text || this.text;\n    const fullText = typeof text === 'string' ? ' ' + text : '';\n    this.stop();\n    this.stream.write(`${this.getFullPrefixText(prefixText, ' ')}${options.symbol || ' '}${fullText}\\n`);\n    return this;\n  }\n\n}\n\nconst oraFactory = function (options) {\n  return new Ora(options);\n};\n\nmodule.exports = oraFactory;\n\nmodule.exports.promise = (action, options) => {\n  // eslint-disable-next-line promise/prefer-await-to-then\n  if (typeof action.then !== 'function') {\n    throw new TypeError('Parameter `action` must be a Promise');\n  }\n\n  const spinner = new Ora(options);\n  spinner.start();\n\n  _asyncToGenerator(function* () {\n    try {\n      yield action;\n      spinner.succeed();\n    } catch {\n      spinner.fail();\n    }\n  })();\n\n  return spinner;\n};","map":{"version":3,"sources":["/home/unthinkable-lap-0268/Documents/angularProject/node_modules/ora/index.js"],"names":["readline","require","chalk","cliCursor","cliSpinners","logSymbols","stripAnsi","wcwidth","isInteractive","isUnicodeSupported","BufferListStream","TEXT","Symbol","PREFIX_TEXT","ASCII_ETX_CODE","StdinDiscarder","constructor","requests","mutedStream","pipe","process","stdout","self","ourEmit","event","data","args","stdin","emit","includes","Reflect","apply","oldEmit","start","realStart","stop","Error","realStop","platform","rl","createInterface","input","output","on","listenerCount","close","kill","pid","undefined","stdinDiscarder","Ora","options","text","color","stream","stderr","discardStdin","spinner","hideCursor","interval","id","isEnabled","isSilent","prefixText","linesToClear","indent","isDiscardingStdin","_indent","Number","isInteger","_updateInterval","_spinner","frameIndex","frames","line","dots","value","updateLineCount","isSpinning","getFullPrefixText","postfix","columns","fullPrefixText","lineCount","split","Math","max","ceil","_isEnabled","TypeError","_isSilent","frame","length","fullText","clear","isTTY","i","moveCursor","clearLine","cursorTo","render","write","hide","setInterval","bind","clearInterval","show","succeed","stopAndPersist","symbol","success","fail","error","warn","warning","info","oraFactory","module","exports","promise","action","then"],"mappings":"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","sourcesContent":["'use strict';\nconst readline = require('readline');\nconst chalk = require('chalk');\nconst cliCursor = require('cli-cursor');\nconst cliSpinners = require('cli-spinners');\nconst logSymbols = require('log-symbols');\nconst stripAnsi = require('strip-ansi');\nconst wcwidth = require('wcwidth');\nconst isInteractive = require('is-interactive');\nconst isUnicodeSupported = require('is-unicode-supported');\nconst {BufferListStream} = require('bl');\n\nconst TEXT = Symbol('text');\nconst PREFIX_TEXT = Symbol('prefixText');\nconst ASCII_ETX_CODE = 0x03; // Ctrl+C emits this code\n\nclass StdinDiscarder {\n\tconstructor() {\n\t\tthis.requests = 0;\n\n\t\tthis.mutedStream = new BufferListStream();\n\t\tthis.mutedStream.pipe(process.stdout);\n\n\t\tconst self = this; // eslint-disable-line unicorn/no-this-assignment\n\t\tthis.ourEmit = function (event, data, ...args) {\n\t\t\tconst {stdin} = process;\n\t\t\tif (self.requests > 0 || stdin.emit === self.ourEmit) {\n\t\t\t\tif (event === 'keypress') { // Fixes readline behavior\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (event === 'data' && data.includes(ASCII_ETX_CODE)) {\n\t\t\t\t\tprocess.emit('SIGINT');\n\t\t\t\t}\n\n\t\t\t\tReflect.apply(self.oldEmit, this, [event, data, ...args]);\n\t\t\t} else {\n\t\t\t\tReflect.apply(process.stdin.emit, this, [event, data, ...args]);\n\t\t\t}\n\t\t};\n\t}\n\n\tstart() {\n\t\tthis.requests++;\n\n\t\tif (this.requests === 1) {\n\t\t\tthis.realStart();\n\t\t}\n\t}\n\n\tstop() {\n\t\tif (this.requests <= 0) {\n\t\t\tthrow new Error('`stop` called more times than `start`');\n\t\t}\n\n\t\tthis.requests--;\n\n\t\tif (this.requests === 0) {\n\t\t\tthis.realStop();\n\t\t}\n\t}\n\n\trealStart() {\n\t\t// No known way to make it work reliably on Windows\n\t\tif (process.platform === 'win32') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.rl = readline.createInterface({\n\t\t\tinput: process.stdin,\n\t\t\toutput: this.mutedStream\n\t\t});\n\n\t\tthis.rl.on('SIGINT', () => {\n\t\t\tif (process.listenerCount('SIGINT') === 0) {\n\t\t\t\tprocess.emit('SIGINT');\n\t\t\t} else {\n\t\t\t\tthis.rl.close();\n\t\t\t\tprocess.kill(process.pid, 'SIGINT');\n\t\t\t}\n\t\t});\n\t}\n\n\trealStop() {\n\t\tif (process.platform === 'win32') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.rl.close();\n\t\tthis.rl = undefined;\n\t}\n}\n\nlet stdinDiscarder;\n\nclass Ora {\n\tconstructor(options) {\n\t\tif (!stdinDiscarder) {\n\t\t\tstdinDiscarder = new StdinDiscarder();\n\t\t}\n\n\t\tif (typeof options === 'string') {\n\t\t\toptions = {\n\t\t\t\ttext: options\n\t\t\t};\n\t\t}\n\n\t\tthis.options = {\n\t\t\ttext: '',\n\t\t\tcolor: 'cyan',\n\t\t\tstream: process.stderr,\n\t\t\tdiscardStdin: true,\n\t\t\t...options\n\t\t};\n\n\t\tthis.spinner = this.options.spinner;\n\n\t\tthis.color = this.options.color;\n\t\tthis.hideCursor = this.options.hideCursor !== false;\n\t\tthis.interval = this.options.interval || this.spinner.interval || 100;\n\t\tthis.stream = this.options.stream;\n\t\tthis.id = undefined;\n\t\tthis.isEnabled = typeof this.options.isEnabled === 'boolean' ? this.options.isEnabled : isInteractive({stream: this.stream});\n\t\tthis.isSilent = typeof this.options.isSilent === 'boolean' ? this.options.isSilent : false;\n\n\t\t// Set *after* `this.stream`\n\t\tthis.text = this.options.text;\n\t\tthis.prefixText = this.options.prefixText;\n\t\tthis.linesToClear = 0;\n\t\tthis.indent = this.options.indent;\n\t\tthis.discardStdin = this.options.discardStdin;\n\t\tthis.isDiscardingStdin = false;\n\t}\n\n\tget indent() {\n\t\treturn this._indent;\n\t}\n\n\tset indent(indent = 0) {\n\t\tif (!(indent >= 0 && Number.isInteger(indent))) {\n\t\t\tthrow new Error('The `indent` option must be an integer from 0 and up');\n\t\t}\n\n\t\tthis._indent = indent;\n\t}\n\n\t_updateInterval(interval) {\n\t\tif (interval !== undefined) {\n\t\t\tthis.interval = interval;\n\t\t}\n\t}\n\n\tget spinner() {\n\t\treturn this._spinner;\n\t}\n\n\tset spinner(spinner) {\n\t\tthis.frameIndex = 0;\n\n\t\tif (typeof spinner === 'object') {\n\t\t\tif (spinner.frames === undefined) {\n\t\t\t\tthrow new Error('The given spinner must have a `frames` property');\n\t\t\t}\n\n\t\t\tthis._spinner = spinner;\n\t\t} else if (!isUnicodeSupported()) {\n\t\t\tthis._spinner = cliSpinners.line;\n\t\t} else if (spinner === undefined) {\n\t\t\t// Set default spinner\n\t\t\tthis._spinner = cliSpinners.dots;\n\t\t} else if (spinner !== 'default' && cliSpinners[spinner]) {\n\t\t\tthis._spinner = cliSpinners[spinner];\n\t\t} else {\n\t\t\tthrow new Error(`There is no built-in spinner named '${spinner}'. See https://github.com/sindresorhus/cli-spinners/blob/main/spinners.json for a full list.`);\n\t\t}\n\n\t\tthis._updateInterval(this._spinner.interval);\n\t}\n\n\tget text() {\n\t\treturn this[TEXT];\n\t}\n\n\tset text(value) {\n\t\tthis[TEXT] = value;\n\t\tthis.updateLineCount();\n\t}\n\n\tget prefixText() {\n\t\treturn this[PREFIX_TEXT];\n\t}\n\n\tset prefixText(value) {\n\t\tthis[PREFIX_TEXT] = value;\n\t\tthis.updateLineCount();\n\t}\n\n\tget isSpinning() {\n\t\treturn this.id !== undefined;\n\t}\n\n\tgetFullPrefixText(prefixText = this[PREFIX_TEXT], postfix = ' ') {\n\t\tif (typeof prefixText === 'string') {\n\t\t\treturn prefixText + postfix;\n\t\t}\n\n\t\tif (typeof prefixText === 'function') {\n\t\t\treturn prefixText() + postfix;\n\t\t}\n\n\t\treturn '';\n\t}\n\n\tupdateLineCount() {\n\t\tconst columns = this.stream.columns || 80;\n\t\tconst fullPrefixText = this.getFullPrefixText(this.prefixText, '-');\n\t\tthis.lineCount = 0;\n\t\tfor (const line of stripAnsi(fullPrefixText + '--' + this[TEXT]).split('\\n')) {\n\t\t\tthis.lineCount += Math.max(1, Math.ceil(wcwidth(line) / columns));\n\t\t}\n\t}\n\n\tget isEnabled() {\n\t\treturn this._isEnabled && !this.isSilent;\n\t}\n\n\tset isEnabled(value) {\n\t\tif (typeof value !== 'boolean') {\n\t\t\tthrow new TypeError('The `isEnabled` option must be a boolean');\n\t\t}\n\n\t\tthis._isEnabled = value;\n\t}\n\n\tget isSilent() {\n\t\treturn this._isSilent;\n\t}\n\n\tset isSilent(value) {\n\t\tif (typeof value !== 'boolean') {\n\t\t\tthrow new TypeError('The `isSilent` option must be a boolean');\n\t\t}\n\n\t\tthis._isSilent = value;\n\t}\n\n\tframe() {\n\t\tconst {frames} = this.spinner;\n\t\tlet frame = frames[this.frameIndex];\n\n\t\tif (this.color) {\n\t\t\tframe = chalk[this.color](frame);\n\t\t}\n\n\t\tthis.frameIndex = ++this.frameIndex % frames.length;\n\t\tconst fullPrefixText = (typeof this.prefixText === 'string' && this.prefixText !== '') ? this.prefixText + ' ' : '';\n\t\tconst fullText = typeof this.text === 'string' ? ' ' + this.text : '';\n\n\t\treturn fullPrefixText + frame + fullText;\n\t}\n\n\tclear() {\n\t\tif (!this.isEnabled || !this.stream.isTTY) {\n\t\t\treturn this;\n\t\t}\n\n\t\tfor (let i = 0; i < this.linesToClear; i++) {\n\t\t\tif (i > 0) {\n\t\t\t\tthis.stream.moveCursor(0, -1);\n\t\t\t}\n\n\t\t\tthis.stream.clearLine();\n\t\t\tthis.stream.cursorTo(this.indent);\n\t\t}\n\n\t\tthis.linesToClear = 0;\n\n\t\treturn this;\n\t}\n\n\trender() {\n\t\tif (this.isSilent) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis.clear();\n\t\tthis.stream.write(this.frame());\n\t\tthis.linesToClear = this.lineCount;\n\n\t\treturn this;\n\t}\n\n\tstart(text) {\n\t\tif (text) {\n\t\t\tthis.text = text;\n\t\t}\n\n\t\tif (this.isSilent) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (!this.isEnabled) {\n\t\t\tif (this.text) {\n\t\t\t\tthis.stream.write(`- ${this.text}\\n`);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tif (this.isSpinning) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (this.hideCursor) {\n\t\t\tcliCursor.hide(this.stream);\n\t\t}\n\n\t\tif (this.discardStdin && process.stdin.isTTY) {\n\t\t\tthis.isDiscardingStdin = true;\n\t\t\tstdinDiscarder.start();\n\t\t}\n\n\t\tthis.render();\n\t\tthis.id = setInterval(this.render.bind(this), this.interval);\n\n\t\treturn this;\n\t}\n\n\tstop() {\n\t\tif (!this.isEnabled) {\n\t\t\treturn this;\n\t\t}\n\n\t\tclearInterval(this.id);\n\t\tthis.id = undefined;\n\t\tthis.frameIndex = 0;\n\t\tthis.clear();\n\t\tif (this.hideCursor) {\n\t\t\tcliCursor.show(this.stream);\n\t\t}\n\n\t\tif (this.discardStdin && process.stdin.isTTY && this.isDiscardingStdin) {\n\t\t\tstdinDiscarder.stop();\n\t\t\tthis.isDiscardingStdin = false;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tsucceed(text) {\n\t\treturn this.stopAndPersist({symbol: logSymbols.success, text});\n\t}\n\n\tfail(text) {\n\t\treturn this.stopAndPersist({symbol: logSymbols.error, text});\n\t}\n\n\twarn(text) {\n\t\treturn this.stopAndPersist({symbol: logSymbols.warning, text});\n\t}\n\n\tinfo(text) {\n\t\treturn this.stopAndPersist({symbol: logSymbols.info, text});\n\t}\n\n\tstopAndPersist(options = {}) {\n\t\tif (this.isSilent) {\n\t\t\treturn this;\n\t\t}\n\n\t\tconst prefixText = options.prefixText || this.prefixText;\n\t\tconst text = options.text || this.text;\n\t\tconst fullText = (typeof text === 'string') ? ' ' + text : '';\n\n\t\tthis.stop();\n\t\tthis.stream.write(`${this.getFullPrefixText(prefixText, ' ')}${options.symbol || ' '}${fullText}\\n`);\n\n\t\treturn this;\n\t}\n}\n\nconst oraFactory = function (options) {\n\treturn new Ora(options);\n};\n\nmodule.exports = oraFactory;\n\nmodule.exports.promise = (action, options) => {\n\t// eslint-disable-next-line promise/prefer-await-to-then\n\tif (typeof action.then !== 'function') {\n\t\tthrow new TypeError('Parameter `action` must be a Promise');\n\t}\n\n\tconst spinner = new Ora(options);\n\tspinner.start();\n\n\t(async () => {\n\t\ttry {\n\t\t\tawait action;\n\t\t\tspinner.succeed();\n\t\t} catch {\n\t\t\tspinner.fail();\n\t\t}\n\t})();\n\n\treturn spinner;\n};\n"]},"metadata":{},"sourceType":"script"}