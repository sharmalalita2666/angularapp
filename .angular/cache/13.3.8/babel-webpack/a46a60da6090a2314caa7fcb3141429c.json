{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"/home/unthinkable-lap-0268/Documents/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createWorkspaceHost = void 0;\n\nconst virtual_fs_1 = require(\"../virtual-fs\");\n\nfunction createWorkspaceHost(host) {\n  const workspaceHost = {\n    readFile(path) {\n      return _asyncToGenerator(function* () {\n        const data = yield host.read((0, virtual_fs_1.normalize)(path)).toPromise();\n        return virtual_fs_1.virtualFs.fileBufferToString(data);\n      })();\n    },\n\n    writeFile(path, data) {\n      return _asyncToGenerator(function* () {\n        return host.write((0, virtual_fs_1.normalize)(path), virtual_fs_1.virtualFs.stringToFileBuffer(data)).toPromise();\n      })();\n    },\n\n    isDirectory(path) {\n      return _asyncToGenerator(function* () {\n        try {\n          return yield host.isDirectory((0, virtual_fs_1.normalize)(path)).toPromise();\n        } catch {\n          // some hosts throw if path does not exist\n          return false;\n        }\n      })();\n    },\n\n    isFile(path) {\n      return _asyncToGenerator(function* () {\n        try {\n          return yield host.isFile((0, virtual_fs_1.normalize)(path)).toPromise();\n        } catch {\n          // some hosts throw if path does not exist\n          return false;\n        }\n      })();\n    }\n\n  };\n  return workspaceHost;\n}\n\nexports.createWorkspaceHost = createWorkspaceHost;","map":{"version":3,"sources":["/home/unthinkable-lap-0268/Documents/angularProject/node_modules/@angular-devkit/core/src/workspace/host.js"],"names":["Object","defineProperty","exports","value","createWorkspaceHost","virtual_fs_1","require","host","workspaceHost","readFile","path","data","read","normalize","toPromise","virtualFs","fileBufferToString","writeFile","write","stringToFileBuffer","isDirectory","isFile"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8B,KAAK,CAAnC;;AACA,MAAMC,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;;AACA,SAASF,mBAAT,CAA6BG,IAA7B,EAAmC;AAC/B,QAAMC,aAAa,GAAG;AACZC,IAAAA,QAAN,CAAeC,IAAf,EAAqB;AAAA;AACjB,cAAMC,IAAI,SAASJ,IAAI,CAACK,IAAL,CAAU,CAAC,GAAGP,YAAY,CAACQ,SAAjB,EAA4BH,IAA5B,CAAV,EAA6CI,SAA7C,EAAnB;AACA,eAAOT,YAAY,CAACU,SAAb,CAAuBC,kBAAvB,CAA0CL,IAA1C,CAAP;AAFiB;AAGpB,KAJiB;;AAKZM,IAAAA,SAAN,CAAgBP,IAAhB,EAAsBC,IAAtB,EAA4B;AAAA;AACxB,eAAOJ,IAAI,CAACW,KAAL,CAAW,CAAC,GAAGb,YAAY,CAACQ,SAAjB,EAA4BH,IAA5B,CAAX,EAA8CL,YAAY,CAACU,SAAb,CAAuBI,kBAAvB,CAA0CR,IAA1C,CAA9C,EAA+FG,SAA/F,EAAP;AADwB;AAE3B,KAPiB;;AAQZM,IAAAA,WAAN,CAAkBV,IAAlB,EAAwB;AAAA;AACpB,YAAI;AACA,uBAAaH,IAAI,CAACa,WAAL,CAAiB,CAAC,GAAGf,YAAY,CAACQ,SAAjB,EAA4BH,IAA5B,CAAjB,EAAoDI,SAApD,EAAb;AACH,SAFD,CAGA,MAAM;AACF;AACA,iBAAO,KAAP;AACH;AAPmB;AAQvB,KAhBiB;;AAiBZO,IAAAA,MAAN,CAAaX,IAAb,EAAmB;AAAA;AACf,YAAI;AACA,uBAAaH,IAAI,CAACc,MAAL,CAAY,CAAC,GAAGhB,YAAY,CAACQ,SAAjB,EAA4BH,IAA5B,CAAZ,EAA+CI,SAA/C,EAAb;AACH,SAFD,CAGA,MAAM;AACF;AACA,iBAAO,KAAP;AACH;AAPc;AAQlB;;AAzBiB,GAAtB;AA2BA,SAAON,aAAP;AACH;;AACDN,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createWorkspaceHost = void 0;\nconst virtual_fs_1 = require(\"../virtual-fs\");\nfunction createWorkspaceHost(host) {\n    const workspaceHost = {\n        async readFile(path) {\n            const data = await host.read((0, virtual_fs_1.normalize)(path)).toPromise();\n            return virtual_fs_1.virtualFs.fileBufferToString(data);\n        },\n        async writeFile(path, data) {\n            return host.write((0, virtual_fs_1.normalize)(path), virtual_fs_1.virtualFs.stringToFileBuffer(data)).toPromise();\n        },\n        async isDirectory(path) {\n            try {\n                return await host.isDirectory((0, virtual_fs_1.normalize)(path)).toPromise();\n            }\n            catch {\n                // some hosts throw if path does not exist\n                return false;\n            }\n        },\n        async isFile(path) {\n            try {\n                return await host.isFile((0, virtual_fs_1.normalize)(path)).toPromise();\n            }\n            catch {\n                // some hosts throw if path does not exist\n                return false;\n            }\n        },\n    };\n    return workspaceHost;\n}\nexports.createWorkspaceHost = createWorkspaceHost;\n"]},"metadata":{},"sourceType":"script"}