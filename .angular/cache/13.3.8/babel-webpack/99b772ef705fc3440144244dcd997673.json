{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.htmlSelectorFormat = void 0; // As per https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n// * Without mandatory `-` as the application prefix will generally cover its inclusion\n// * And an allowance for upper alpha characters\n// NOTE: This should eventually be broken out into two formats: full and partial (allows for prefix)\n\nconst unicodeRanges = [[0xc0, 0xd6], [0xd8, 0xf6], [0xf8, 0x37d], [0x37f, 0x1fff], [0x200c, 0x200d], [0x203f, 0x2040], [0x2070, 0x218f], [0x2c00, 0x2fef], [0x3001, 0xd7ff], [0xf900, 0xfdcf], [0xfdf0, 0xfffd], [0x10000, 0xeffff]];\n\nfunction isValidElementName(name) {\n  let regex = '^[a-zA-Z][';\n  regex += '-.0-9_a-zA-Z\\\\u{B7}';\n\n  for (const range of unicodeRanges) {\n    regex += `\\\\u{${range[0].toString(16)}}-\\\\u{${range[1].toString(16)}}`;\n  }\n\n  regex += ']*$';\n  return new RegExp(regex, 'u').test(name);\n}\n\nexports.htmlSelectorFormat = {\n  name: 'html-selector',\n  formatter: {\n    async: false,\n    validate: name => typeof name === 'string' && isValidElementName(name)\n  }\n};","map":{"version":3,"sources":["/home/unthinkable-lap-0268/Documents/angularProject/node_modules/@angular-devkit/schematics/src/formats/html-selector.js"],"names":["Object","defineProperty","exports","value","htmlSelectorFormat","unicodeRanges","isValidElementName","name","regex","range","toString","RegExp","test","formatter","async","validate"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6B,KAAK,CAAlC,C,CACA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAG,CAClB,CAAC,IAAD,EAAO,IAAP,CADkB,EAElB,CAAC,IAAD,EAAO,IAAP,CAFkB,EAGlB,CAAC,IAAD,EAAO,KAAP,CAHkB,EAIlB,CAAC,KAAD,EAAQ,MAAR,CAJkB,EAKlB,CAAC,MAAD,EAAS,MAAT,CALkB,EAMlB,CAAC,MAAD,EAAS,MAAT,CANkB,EAOlB,CAAC,MAAD,EAAS,MAAT,CAPkB,EAQlB,CAAC,MAAD,EAAS,MAAT,CARkB,EASlB,CAAC,MAAD,EAAS,MAAT,CATkB,EAUlB,CAAC,MAAD,EAAS,MAAT,CAVkB,EAWlB,CAAC,MAAD,EAAS,MAAT,CAXkB,EAYlB,CAAC,OAAD,EAAU,OAAV,CAZkB,CAAtB;;AAcA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;AAC9B,MAAIC,KAAK,GAAG,YAAZ;AACAA,EAAAA,KAAK,IAAI,qBAAT;;AACA,OAAK,MAAMC,KAAX,IAAoBJ,aAApB,EAAmC;AAC/BG,IAAAA,KAAK,IAAK,OAAMC,KAAK,CAAC,CAAD,CAAL,CAASC,QAAT,CAAkB,EAAlB,CAAsB,SAAQD,KAAK,CAAC,CAAD,CAAL,CAASC,QAAT,CAAkB,EAAlB,CAAsB,GAApE;AACH;;AACDF,EAAAA,KAAK,IAAI,KAAT;AACA,SAAO,IAAIG,MAAJ,CAAWH,KAAX,EAAkB,GAAlB,EAAuBI,IAAvB,CAA4BL,IAA5B,CAAP;AACH;;AACDL,OAAO,CAACE,kBAAR,GAA6B;AACzBG,EAAAA,IAAI,EAAE,eADmB;AAEzBM,EAAAA,SAAS,EAAE;AACPC,IAAAA,KAAK,EAAE,KADA;AAEPC,IAAAA,QAAQ,EAAGR,IAAD,IAAU,OAAOA,IAAP,KAAgB,QAAhB,IAA4BD,kBAAkB,CAACC,IAAD;AAF3D;AAFc,CAA7B","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.htmlSelectorFormat = void 0;\n// As per https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n// * Without mandatory `-` as the application prefix will generally cover its inclusion\n// * And an allowance for upper alpha characters\n// NOTE: This should eventually be broken out into two formats: full and partial (allows for prefix)\nconst unicodeRanges = [\n    [0xc0, 0xd6],\n    [0xd8, 0xf6],\n    [0xf8, 0x37d],\n    [0x37f, 0x1fff],\n    [0x200c, 0x200d],\n    [0x203f, 0x2040],\n    [0x2070, 0x218f],\n    [0x2c00, 0x2fef],\n    [0x3001, 0xd7ff],\n    [0xf900, 0xfdcf],\n    [0xfdf0, 0xfffd],\n    [0x10000, 0xeffff],\n];\nfunction isValidElementName(name) {\n    let regex = '^[a-zA-Z][';\n    regex += '-.0-9_a-zA-Z\\\\u{B7}';\n    for (const range of unicodeRanges) {\n        regex += `\\\\u{${range[0].toString(16)}}-\\\\u{${range[1].toString(16)}}`;\n    }\n    regex += ']*$';\n    return new RegExp(regex, 'u').test(name);\n}\nexports.htmlSelectorFormat = {\n    name: 'html-selector',\n    formatter: {\n        async: false,\n        validate: (name) => typeof name === 'string' && isValidElementName(name),\n    },\n};\n"]},"metadata":{},"sourceType":"script"}