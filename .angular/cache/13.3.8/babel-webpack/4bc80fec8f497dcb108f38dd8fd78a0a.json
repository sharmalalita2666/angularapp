{"ast":null,"code":"'use strict';\n/**\n * `list` type prompt\n */\n\nconst _ = {\n  isNumber: require('lodash/isNumber'),\n  findIndex: require('lodash/findIndex'),\n  isString: require('lodash/isString')\n};\n\nconst chalk = require('chalk');\n\nconst figures = require('figures');\n\nconst cliCursor = require('cli-cursor');\n\nconst runAsync = require('run-async');\n\nconst {\n  flatMap,\n  map,\n  take,\n  takeUntil\n} = require('rxjs/operators');\n\nconst Base = require('./base');\n\nconst observe = require('../utils/events');\n\nconst Paginator = require('../utils/paginator');\n\nconst incrementListIndex = require('../utils/incrementListIndex');\n\nclass ListPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    this.firstRender = true;\n    this.selected = 0;\n    const def = this.opt.default; // If def is a Number, then use as index. Otherwise, check for value.\n\n    if (_.isNumber(def) && def >= 0 && def < this.opt.choices.realLength) {\n      this.selected = def;\n    } else if (!_.isNumber(def) && def != null) {\n      const index = _.findIndex(this.opt.choices.realChoices, ({\n        value\n      }) => value === def);\n\n      this.selected = Math.max(index, 0);\n    } // Make sure no default is set (so it won't be printed)\n\n\n    this.opt.default = null;\n    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;\n    this.paginator = new Paginator(this.screen, {\n      isInfinite: shouldLoop\n    });\n  }\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n\n  _run(cb) {\n    this.done = cb;\n    const self = this;\n    const events = observe(this.rl);\n    events.normalizedUpKey.pipe(takeUntil(events.line)).forEach(this.onUpKey.bind(this));\n    events.normalizedDownKey.pipe(takeUntil(events.line)).forEach(this.onDownKey.bind(this));\n    events.numberKey.pipe(takeUntil(events.line)).forEach(this.onNumberKey.bind(this));\n    events.line.pipe(take(1), map(this.getCurrentValue.bind(this)), flatMap(value => runAsync(self.opt.filter)(value, self.answers).catch(err => err))).forEach(this.onSubmit.bind(this)); // Init the prompt\n\n    cliCursor.hide();\n    this.render();\n    return this;\n  }\n  /**\n   * Render the prompt to screen\n   * @return {ListPrompt} self\n   */\n\n\n  render() {\n    // Render question\n    let message = this.getQuestion();\n\n    if (this.firstRender) {\n      message += chalk.dim('(Use arrow keys)');\n    } // Render choices or answer depending on the state\n\n\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.opt.choices.getChoice(this.selected).short);\n    } else {\n      const choicesStr = listRender(this.opt.choices, this.selected);\n      const indexPosition = this.opt.choices.indexOf(this.opt.choices.getChoice(this.selected));\n      const realIndexPosition = this.opt.choices.reduce((acc, value, i) => {\n        // Dont count lines past the choice we are looking at\n        if (i > indexPosition) {\n          return acc;\n        } // Add line if it's a separator\n\n\n        if (value.type === 'separator') {\n          return acc + 1;\n        }\n\n        let l = value.name; // Non-strings take up one line\n\n        if (typeof l !== 'string') {\n          return acc + 1;\n        } // Calculate lines taken up by string\n\n\n        l = l.split('\\n');\n        return acc + l.length;\n      }, 0) - 1;\n      message += '\\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);\n    }\n\n    this.firstRender = false;\n    this.screen.render(message);\n  }\n  /**\n   * When user press `enter` key\n   */\n\n\n  onSubmit(value) {\n    this.status = 'answered'; // Rerender prompt\n\n    this.render();\n    this.screen.done();\n    cliCursor.show();\n    this.done(value);\n  }\n\n  getCurrentValue() {\n    return this.opt.choices.getChoice(this.selected).value;\n  }\n  /**\n   * When user press a key\n   */\n\n\n  onUpKey() {\n    this.selected = incrementListIndex(this.selected, 'up', this.opt);\n    this.render();\n  }\n\n  onDownKey() {\n    this.selected = incrementListIndex(this.selected, 'down', this.opt);\n    this.render();\n  }\n\n  onNumberKey(input) {\n    if (input <= this.opt.choices.realLength) {\n      this.selected = input - 1;\n    }\n\n    this.render();\n  }\n\n}\n/**\n * Function for rendering list choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\n\n\nfunction listRender(choices, pointer) {\n  let output = '';\n  let separatorOffset = 0;\n  choices.forEach((choice, i) => {\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += '  ' + choice + '\\n';\n      return;\n    }\n\n    if (choice.disabled) {\n      separatorOffset++;\n      output += '  - ' + choice.name;\n      output += ' (' + (_.isString(choice.disabled) ? choice.disabled : 'Disabled') + ')';\n      output += '\\n';\n      return;\n    }\n\n    const isSelected = i - separatorOffset === pointer;\n    let line = (isSelected ? figures.pointer + ' ' : '  ') + choice.name;\n\n    if (isSelected) {\n      line = chalk.cyan(line);\n    }\n\n    output += line + ' \\n';\n  });\n  return output.replace(/\\n$/, '');\n}\n\nmodule.exports = ListPrompt;","map":{"version":3,"sources":["/home/unthinkable-lap-0268/Documents/angularProject/node_modules/inquirer/lib/prompts/list.js"],"names":["_","isNumber","require","findIndex","isString","chalk","figures","cliCursor","runAsync","flatMap","map","take","takeUntil","Base","observe","Paginator","incrementListIndex","ListPrompt","constructor","questions","rl","answers","opt","choices","throwParamError","firstRender","selected","def","default","realLength","index","realChoices","value","Math","max","shouldLoop","loop","undefined","paginator","screen","isInfinite","_run","cb","done","self","events","normalizedUpKey","pipe","line","forEach","onUpKey","bind","normalizedDownKey","onDownKey","numberKey","onNumberKey","getCurrentValue","filter","catch","err","onSubmit","hide","render","message","getQuestion","dim","status","cyan","getChoice","short","choicesStr","listRender","indexPosition","indexOf","realIndexPosition","reduce","acc","i","type","l","name","split","length","paginate","pageSize","show","input","pointer","output","separatorOffset","choice","disabled","isSelected","replace","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * `list` type prompt\n */\n\nconst _ = {\n  isNumber: require('lodash/isNumber'),\n  findIndex: require('lodash/findIndex'),\n  isString: require('lodash/isString'),\n};\nconst chalk = require('chalk');\nconst figures = require('figures');\nconst cliCursor = require('cli-cursor');\nconst runAsync = require('run-async');\nconst { flatMap, map, take, takeUntil } = require('rxjs/operators');\nconst Base = require('./base');\nconst observe = require('../utils/events');\nconst Paginator = require('../utils/paginator');\nconst incrementListIndex = require('../utils/incrementListIndex');\n\nclass ListPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    this.firstRender = true;\n    this.selected = 0;\n\n    const def = this.opt.default;\n\n    // If def is a Number, then use as index. Otherwise, check for value.\n    if (_.isNumber(def) && def >= 0 && def < this.opt.choices.realLength) {\n      this.selected = def;\n    } else if (!_.isNumber(def) && def != null) {\n      const index = _.findIndex(\n        this.opt.choices.realChoices,\n        ({ value }) => value === def\n      );\n      this.selected = Math.max(index, 0);\n    }\n\n    // Make sure no default is set (so it won't be printed)\n    this.opt.default = null;\n\n    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;\n    this.paginator = new Paginator(this.screen, { isInfinite: shouldLoop });\n  }\n\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    const self = this;\n\n    const events = observe(this.rl);\n    events.normalizedUpKey.pipe(takeUntil(events.line)).forEach(this.onUpKey.bind(this));\n    events.normalizedDownKey\n      .pipe(takeUntil(events.line))\n      .forEach(this.onDownKey.bind(this));\n    events.numberKey.pipe(takeUntil(events.line)).forEach(this.onNumberKey.bind(this));\n    events.line\n      .pipe(\n        take(1),\n        map(this.getCurrentValue.bind(this)),\n        flatMap((value) =>\n          runAsync(self.opt.filter)(value, self.answers).catch((err) => err)\n        )\n      )\n      .forEach(this.onSubmit.bind(this));\n\n    // Init the prompt\n    cliCursor.hide();\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {ListPrompt} self\n   */\n\n  render() {\n    // Render question\n    let message = this.getQuestion();\n\n    if (this.firstRender) {\n      message += chalk.dim('(Use arrow keys)');\n    }\n\n    // Render choices or answer depending on the state\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.opt.choices.getChoice(this.selected).short);\n    } else {\n      const choicesStr = listRender(this.opt.choices, this.selected);\n      const indexPosition = this.opt.choices.indexOf(\n        this.opt.choices.getChoice(this.selected)\n      );\n      const realIndexPosition =\n        this.opt.choices.reduce((acc, value, i) => {\n          // Dont count lines past the choice we are looking at\n          if (i > indexPosition) {\n            return acc;\n          }\n          // Add line if it's a separator\n          if (value.type === 'separator') {\n            return acc + 1;\n          }\n\n          let l = value.name;\n          // Non-strings take up one line\n          if (typeof l !== 'string') {\n            return acc + 1;\n          }\n\n          // Calculate lines taken up by string\n          l = l.split('\\n');\n          return acc + l.length;\n        }, 0) - 1;\n      message +=\n        '\\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);\n    }\n\n    this.firstRender = false;\n\n    this.screen.render(message);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  onSubmit(value) {\n    this.status = 'answered';\n\n    // Rerender prompt\n    this.render();\n\n    this.screen.done();\n    cliCursor.show();\n    this.done(value);\n  }\n\n  getCurrentValue() {\n    return this.opt.choices.getChoice(this.selected).value;\n  }\n\n  /**\n   * When user press a key\n   */\n  onUpKey() {\n    this.selected = incrementListIndex(this.selected, 'up', this.opt);\n    this.render();\n  }\n\n  onDownKey() {\n    this.selected = incrementListIndex(this.selected, 'down', this.opt);\n    this.render();\n  }\n\n  onNumberKey(input) {\n    if (input <= this.opt.choices.realLength) {\n      this.selected = input - 1;\n    }\n\n    this.render();\n  }\n}\n\n/**\n * Function for rendering list choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\nfunction listRender(choices, pointer) {\n  let output = '';\n  let separatorOffset = 0;\n\n  choices.forEach((choice, i) => {\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += '  ' + choice + '\\n';\n      return;\n    }\n\n    if (choice.disabled) {\n      separatorOffset++;\n      output += '  - ' + choice.name;\n      output += ' (' + (_.isString(choice.disabled) ? choice.disabled : 'Disabled') + ')';\n      output += '\\n';\n      return;\n    }\n\n    const isSelected = i - separatorOffset === pointer;\n    let line = (isSelected ? figures.pointer + ' ' : '  ') + choice.name;\n    if (isSelected) {\n      line = chalk.cyan(line);\n    }\n\n    output += line + ' \\n';\n  });\n\n  return output.replace(/\\n$/, '');\n}\n\nmodule.exports = ListPrompt;\n"]},"metadata":{},"sourceType":"script"}