{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"/home/unthinkable-lap-0268/Documents/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoreSchemaRegistry = exports.SchemaValidationException = void 0;\n\nconst ajv_1 = __importDefault(require(\"ajv\"));\n\nconst ajv_formats_1 = __importDefault(require(\"ajv-formats\"));\n\nconst http = __importStar(require(\"http\"));\n\nconst https = __importStar(require(\"https\"));\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst Url = __importStar(require(\"url\"));\n\nconst exception_1 = require(\"../../exception/exception\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst utils_2 = require(\"../utils\");\n\nconst utility_1 = require(\"./utility\");\n\nconst visitor_1 = require(\"./visitor\");\n\nclass SchemaValidationException extends exception_1.BaseException {\n  constructor(errors, baseMessage = 'Schema validation failed with the following errors:') {\n    if (!errors || errors.length === 0) {\n      super('Schema validation failed.');\n      this.errors = [];\n      return;\n    }\n\n    const messages = SchemaValidationException.createMessages(errors);\n    super(`${baseMessage}\\n  ${messages.join('\\n  ')}`);\n    this.errors = errors;\n  }\n\n  static createMessages(errors) {\n    if (!errors || errors.length === 0) {\n      return [];\n    }\n\n    const messages = errors.map(err => {\n      var _a;\n\n      let message = `Data path ${JSON.stringify(err.instancePath)} ${err.message}`;\n\n      if (err.params) {\n        switch (err.keyword) {\n          case 'additionalProperties':\n            message += `(${err.params.additionalProperty})`;\n            break;\n\n          case 'enum':\n            message += `. Allowed values are: ${(_a = err.params.allowedValues) === null || _a === void 0 ? void 0 : _a.map(v => `\"${v}\"`).join(', ')}`;\n            break;\n        }\n      }\n\n      return message + '.';\n    });\n    return messages;\n  }\n\n}\n\nexports.SchemaValidationException = SchemaValidationException;\n\nclass CoreSchemaRegistry {\n  constructor(formats = []) {\n    this._uriCache = new Map();\n    this._uriHandlers = new Set();\n    this._pre = new utils_1.PartiallyOrderedSet();\n    this._post = new utils_1.PartiallyOrderedSet();\n    this._smartDefaultKeyword = false;\n    this._sourceMap = new Map();\n    this._ajv = new ajv_1.default({\n      strict: false,\n      loadSchema: uri => this._fetch(uri),\n      passContext: true\n    });\n    (0, ajv_formats_1.default)(this._ajv);\n\n    for (const format of formats) {\n      this.addFormat(format);\n    }\n  }\n\n  _fetch(uri) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const maybeSchema = _this._uriCache.get(uri);\n\n      if (maybeSchema) {\n        return maybeSchema;\n      } // Try all handlers, one after the other.\n\n\n      for (const handler of _this._uriHandlers) {\n        let handlerResult = handler(uri);\n\n        if (handlerResult === null || handlerResult === undefined) {\n          continue;\n        }\n\n        if ((0, rxjs_1.isObservable)(handlerResult)) {\n          handlerResult = handlerResult.toPromise();\n        }\n\n        const value = yield handlerResult;\n\n        _this._uriCache.set(uri, value);\n\n        return value;\n      } // If none are found, handle using http client.\n\n\n      return new Promise((resolve, reject) => {\n        const url = new Url.URL(uri);\n        const client = url.protocol === 'https:' ? https : http;\n        client.get(url, res => {\n          if (!res.statusCode || res.statusCode >= 300) {\n            // Consume the rest of the data to free memory.\n            res.resume();\n            reject(new Error(`Request failed. Status Code: ${res.statusCode}`));\n          } else {\n            res.setEncoding('utf8');\n            let data = '';\n            res.on('data', chunk => {\n              data += chunk;\n            });\n            res.on('end', () => {\n              try {\n                const json = JSON.parse(data);\n\n                _this._uriCache.set(uri, json);\n\n                resolve(json);\n              } catch (err) {\n                reject(err);\n              }\n            });\n          }\n        });\n      });\n    })();\n  }\n  /**\n   * Add a transformation step before the validation of any Json.\n   * @param {JsonVisitor} visitor The visitor to transform every value.\n   * @param {JsonVisitor[]} deps A list of other visitors to run before.\n   */\n\n\n  addPreTransform(visitor, deps) {\n    this._pre.add(visitor, deps);\n  }\n  /**\n   * Add a transformation step after the validation of any Json. The JSON will not be validated\n   * after the POST, so if transformations are not compatible with the Schema it will not result\n   * in an error.\n   * @param {JsonVisitor} visitor The visitor to transform every value.\n   * @param {JsonVisitor[]} deps A list of other visitors to run before.\n   */\n\n\n  addPostTransform(visitor, deps) {\n    this._post.add(visitor, deps);\n  }\n\n  _resolver(ref, validate) {\n    if (!validate || !ref) {\n      return {};\n    }\n\n    const schema = validate.schemaEnv.root.schema;\n    const id = typeof schema === 'object' ? schema.$id : null;\n    let fullReference = ref;\n\n    if (typeof id === 'string') {\n      fullReference = Url.resolve(id, ref);\n\n      if (ref.startsWith('#')) {\n        fullReference = id + fullReference;\n      }\n    }\n\n    const resolvedSchema = this._ajv.getSchema(fullReference);\n\n    return {\n      context: resolvedSchema === null || resolvedSchema === void 0 ? void 0 : resolvedSchema.schemaEnv.validate,\n      schema: resolvedSchema === null || resolvedSchema === void 0 ? void 0 : resolvedSchema.schema\n    };\n  }\n  /**\n   * Flatten the Schema, resolving and replacing all the refs. Makes it into a synchronous schema\n   * that is also easier to traverse. Does not cache the result.\n   *\n   * @param schema The schema or URI to flatten.\n   * @returns An Observable of the flattened schema object.\n   * @deprecated since 11.2 without replacement.\n   * Producing a flatten schema document does not in all cases produce a schema with identical behavior to the original.\n   * See: https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.appendix.B.2\n   */\n\n\n  flatten(schema) {\n    return (0, rxjs_1.from)(this._flatten(schema));\n  }\n\n  _flatten(schema) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2._ajv.removeSchema(schema);\n\n      _this2._currentCompilationSchemaInfo = undefined;\n      const validate = yield _this2._ajv.compileAsync(schema); // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n      const self = _this2;\n\n      function visitor(current, pointer, parentSchema, index) {\n        if (current && parentSchema && index && (0, utils_2.isJsonObject)(current) && Object.prototype.hasOwnProperty.call(current, '$ref') && typeof current['$ref'] == 'string') {\n          const resolved = self._resolver(current['$ref'], validate);\n\n          if (resolved.schema) {\n            parentSchema[index] = resolved.schema;\n          }\n        }\n      }\n\n      const schemaCopy = (0, utils_1.deepCopy)(validate.schema);\n      (0, visitor_1.visitJsonSchema)(schemaCopy, visitor);\n      return schemaCopy;\n    })();\n  }\n  /**\n   * Compile and return a validation function for the Schema.\n   *\n   * @param schema The schema to validate. If a string, will fetch the schema before compiling it\n   * (using schema as a URI).\n   * @returns An Observable of the Validation function.\n   */\n\n\n  compile(schema) {\n    return (0, rxjs_1.from)(this._compile(schema)).pipe((0, operators_1.map)(validate => (value, options) => (0, rxjs_1.from)(validate(value, options))));\n  }\n\n  _compile(schema) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (typeof schema === 'boolean') {\n        return /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (data) {\n            return {\n              success: schema,\n              data\n            };\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n      }\n\n      const schemaInfo = {\n        smartDefaultRecord: new Map(),\n        promptDefinitions: []\n      };\n\n      _this3._ajv.removeSchema(schema);\n\n      let validator;\n\n      try {\n        _this3._currentCompilationSchemaInfo = schemaInfo;\n        validator = _this3._ajv.compile(schema);\n      } catch (e) {\n        // This should eventually be refactored so that we we handle race condition where the same schema is validated at the same time.\n        if (!(e instanceof ajv_1.default.MissingRefError)) {\n          throw e;\n        }\n\n        validator = yield _this3._ajv.compileAsync(schema);\n      } finally {\n        _this3._currentCompilationSchemaInfo = undefined;\n      }\n\n      return /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (data, options) {\n          var _a;\n\n          const validationOptions = {\n            withPrompts: true,\n            applyPostTransforms: true,\n            applyPreTransforms: true,\n            ...options\n          };\n          const validationContext = {\n            promptFieldsWithValue: new Set()\n          }; // Apply pre-validation transforms\n\n          if (validationOptions.applyPreTransforms) {\n            for (const visitor of _this3._pre.values()) {\n              data = yield (0, visitor_1.visitJson)(data, visitor, schema, _this3._resolver.bind(_this3), validator).toPromise();\n            }\n          } // Apply smart defaults\n\n\n          yield _this3._applySmartDefaults(data, schemaInfo.smartDefaultRecord); // Apply prompts\n\n          if (validationOptions.withPrompts) {\n            const visitor = (value, pointer) => {\n              if (value !== undefined) {\n                validationContext.promptFieldsWithValue.add(pointer);\n              }\n\n              return value;\n            };\n\n            if (typeof schema === 'object') {\n              yield (0, visitor_1.visitJson)(data, visitor, schema, _this3._resolver.bind(_this3), validator).toPromise();\n            }\n\n            const definitions = schemaInfo.promptDefinitions.filter(def => !validationContext.promptFieldsWithValue.has(def.id));\n\n            if (definitions.length > 0) {\n              yield _this3._applyPrompts(data, definitions);\n            }\n          } // Validate using ajv\n\n\n          try {\n            const success = yield validator.call(validationContext, data);\n\n            if (!success) {\n              return {\n                data,\n                success,\n                errors: (_a = validator.errors) !== null && _a !== void 0 ? _a : []\n              };\n            }\n          } catch (error) {\n            if (error instanceof ajv_1.default.ValidationError) {\n              return {\n                data,\n                success: false,\n                errors: error.errors\n              };\n            }\n\n            throw error;\n          } // Apply post-validation transforms\n\n\n          if (validationOptions.applyPostTransforms) {\n            for (const visitor of _this3._post.values()) {\n              data = yield (0, visitor_1.visitJson)(data, visitor, schema, _this3._resolver.bind(_this3), validator).toPromise();\n            }\n          }\n\n          return {\n            data,\n            success: true\n          };\n        });\n\n        return function (_x2, _x3) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n    })();\n  }\n\n  addFormat(format) {\n    this._ajv.addFormat(format.name, format.formatter);\n  }\n\n  addSmartDefaultProvider(source, provider) {\n    if (this._sourceMap.has(source)) {\n      throw new Error(source);\n    }\n\n    this._sourceMap.set(source, provider);\n\n    if (!this._smartDefaultKeyword) {\n      this._smartDefaultKeyword = true;\n\n      this._ajv.addKeyword({\n        keyword: '$default',\n        errors: false,\n        valid: true,\n        compile: (schema, _parentSchema, it) => {\n          const compilationSchemInfo = this._currentCompilationSchemaInfo;\n\n          if (compilationSchemInfo === undefined) {\n            return () => true;\n          } // We cheat, heavily.\n\n\n          const pathArray = this.normalizeDataPathArr(it);\n          compilationSchemInfo.smartDefaultRecord.set(JSON.stringify(pathArray), schema);\n          return () => true;\n        },\n        metaSchema: {\n          type: 'object',\n          properties: {\n            '$source': {\n              type: 'string'\n            }\n          },\n          additionalProperties: true,\n          required: ['$source']\n        }\n      });\n    }\n  }\n\n  registerUriHandler(handler) {\n    this._uriHandlers.add(handler);\n  }\n\n  usePromptProvider(provider) {\n    const isSetup = !!this._promptProvider;\n    this._promptProvider = provider;\n\n    if (isSetup) {\n      return;\n    }\n\n    this._ajv.addKeyword({\n      keyword: 'x-prompt',\n      errors: false,\n      valid: true,\n      compile: (schema, parentSchema, it) => {\n        const compilationSchemInfo = this._currentCompilationSchemaInfo;\n\n        if (!compilationSchemInfo) {\n          return () => true;\n        }\n\n        const path = '/' + this.normalizeDataPathArr(it).join('/');\n        let type;\n        let items;\n        let message;\n\n        if (typeof schema == 'string') {\n          message = schema;\n        } else {\n          message = schema.message;\n          type = schema.type;\n          items = schema.items;\n        }\n\n        const propertyTypes = (0, utility_1.getTypesOfSchema)(parentSchema);\n\n        if (!type) {\n          if (propertyTypes.size === 1 && propertyTypes.has('boolean')) {\n            type = 'confirmation';\n          } else if (Array.isArray(parentSchema.enum)) {\n            type = 'list';\n          } else if (propertyTypes.size === 1 && propertyTypes.has('array') && parentSchema.items && Array.isArray(parentSchema.items.enum)) {\n            type = 'list';\n          } else {\n            type = 'input';\n          }\n        }\n\n        let multiselect;\n\n        if (type === 'list') {\n          multiselect = schema.multiselect === undefined ? propertyTypes.size === 1 && propertyTypes.has('array') : schema.multiselect;\n          const enumValues = multiselect ? parentSchema.items && parentSchema.items.enum : parentSchema.enum;\n\n          if (!items && Array.isArray(enumValues)) {\n            items = [];\n\n            for (const value of enumValues) {\n              if (typeof value == 'string') {\n                items.push(value);\n              } else if (typeof value == 'object') {// Invalid\n              } else {\n                items.push({\n                  label: value.toString(),\n                  value\n                });\n              }\n            }\n          }\n        }\n\n        const definition = {\n          id: path,\n          type,\n          message,\n          raw: schema,\n          items,\n          multiselect,\n          propertyTypes,\n          default: typeof parentSchema.default == 'object' && parentSchema.default !== null && !Array.isArray(parentSchema.default) ? undefined : parentSchema.default,\n\n          validator(data) {\n            return _asyncToGenerator(function* () {\n              var _a;\n\n              try {\n                const result = yield it.self.validate(parentSchema, data); // If the schema is sync then false will be returned on validation failure\n\n                if (result) {\n                  return result;\n                } else if ((_a = it.self.errors) === null || _a === void 0 ? void 0 : _a.length) {\n                  // Validation errors will be present on the Ajv instance when sync\n                  return it.self.errors[0].message;\n                }\n              } catch (e) {\n                // If the schema is async then an error will be thrown on validation failure\n                if (Array.isArray(e.errors) && e.errors.length) {\n                  return e.errors[0].message;\n                }\n              }\n\n              return false;\n            })();\n          }\n\n        };\n        compilationSchemInfo.promptDefinitions.push(definition);\n        return function () {\n          // If 'this' is undefined in the call, then it defaults to the global\n          // 'this'.\n          if (this && this.promptFieldsWithValue) {\n            this.promptFieldsWithValue.add(path);\n          }\n\n          return true;\n        };\n      },\n      metaSchema: {\n        oneOf: [{\n          type: 'string'\n        }, {\n          type: 'object',\n          properties: {\n            'type': {\n              type: 'string'\n            },\n            'message': {\n              type: 'string'\n            }\n          },\n          additionalProperties: true,\n          required: ['message']\n        }]\n      }\n    });\n  }\n\n  _applyPrompts(data, prompts) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const provider = _this4._promptProvider;\n\n      if (!provider) {\n        return;\n      }\n\n      const answers = yield (0, rxjs_1.from)(provider(prompts)).toPromise();\n\n      for (const path in answers) {\n        const pathFragments = path.split('/').slice(1);\n\n        CoreSchemaRegistry._set(data, pathFragments, answers[path], null, undefined, true);\n      }\n    })();\n  }\n\n  static _set( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data, fragments, value, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  parent = null, parentProperty, force) {\n    for (let index = 0; index < fragments.length; index++) {\n      const fragment = fragments[index];\n\n      if (/^i\\d+$/.test(fragment)) {\n        if (!Array.isArray(data)) {\n          return;\n        }\n\n        for (let dataIndex = 0; dataIndex < data.length; dataIndex++) {\n          CoreSchemaRegistry._set(data[dataIndex], fragments.slice(index + 1), value, data, `${dataIndex}`);\n        }\n\n        return;\n      }\n\n      if (!data && parent !== null && parentProperty) {\n        data = parent[parentProperty] = {};\n      }\n\n      parent = data;\n      parentProperty = fragment;\n      data = data[fragment];\n    }\n\n    if (parent && parentProperty && (force || parent[parentProperty] === undefined)) {\n      parent[parentProperty] = value;\n    }\n  }\n\n  _applySmartDefaults(data, smartDefaults) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      for (const [pointer, schema] of smartDefaults.entries()) {\n        const fragments = JSON.parse(pointer);\n\n        const source = _this5._sourceMap.get(schema.$source);\n\n        if (!source) {\n          continue;\n        }\n\n        let value = source(schema);\n\n        if ((0, rxjs_1.isObservable)(value)) {\n          value = yield value.toPromise();\n        }\n\n        CoreSchemaRegistry._set(data, fragments, value);\n      }\n    })();\n  }\n\n  useXDeprecatedProvider(onUsage) {\n    this._ajv.addKeyword({\n      keyword: 'x-deprecated',\n      validate: (schema, _data, _parentSchema, dataCxt) => {\n        if (schema) {\n          onUsage(`Option \"${dataCxt === null || dataCxt === void 0 ? void 0 : dataCxt.parentDataProperty}\" is deprecated${typeof schema == 'string' ? ': ' + schema : '.'}`);\n        }\n\n        return true;\n      },\n      errors: false\n    });\n  }\n\n  normalizeDataPathArr(it) {\n    return it.dataPathArr.slice(1, it.dataLevel + 1).map(p => typeof p === 'number' ? p : p.str.replace(/\"/g, ''));\n  }\n\n}\n\nexports.CoreSchemaRegistry = CoreSchemaRegistry;","map":{"version":3,"sources":["/home/unthinkable-lap-0268/Documents/angularProject/node_modules/@angular-devkit/core/src/json/schema/registry.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","CoreSchemaRegistry","SchemaValidationException","ajv_1","require","ajv_formats_1","http","https","rxjs_1","operators_1","Url","exception_1","utils_1","utils_2","utility_1","visitor_1","BaseException","constructor","errors","baseMessage","length","messages","createMessages","join","map","err","_a","message","JSON","stringify","instancePath","params","keyword","additionalProperty","allowedValues","formats","_uriCache","Map","_uriHandlers","Set","_pre","PartiallyOrderedSet","_post","_smartDefaultKeyword","_sourceMap","_ajv","default","strict","loadSchema","uri","_fetch","passContext","format","addFormat","maybeSchema","handler","handlerResult","isObservable","toPromise","set","Promise","resolve","reject","url","URL","client","protocol","res","statusCode","resume","Error","setEncoding","data","on","chunk","json","parse","addPreTransform","visitor","deps","add","addPostTransform","_resolver","ref","validate","schema","schemaEnv","root","id","$id","fullReference","startsWith","resolvedSchema","getSchema","context","flatten","from","_flatten","removeSchema","_currentCompilationSchemaInfo","compileAsync","self","current","pointer","parentSchema","index","isJsonObject","resolved","schemaCopy","deepCopy","visitJsonSchema","compile","_compile","pipe","options","success","schemaInfo","smartDefaultRecord","promptDefinitions","validator","e","MissingRefError","validationOptions","withPrompts","applyPostTransforms","applyPreTransforms","validationContext","promptFieldsWithValue","values","visitJson","bind","_applySmartDefaults","definitions","filter","def","has","_applyPrompts","error","ValidationError","name","formatter","addSmartDefaultProvider","source","provider","addKeyword","valid","_parentSchema","it","compilationSchemInfo","pathArray","normalizeDataPathArr","metaSchema","type","properties","additionalProperties","required","registerUriHandler","usePromptProvider","isSetup","_promptProvider","path","items","propertyTypes","getTypesOfSchema","size","Array","isArray","enum","multiselect","enumValues","push","label","toString","definition","raw","oneOf","prompts","answers","pathFragments","split","slice","_set","fragments","parent","parentProperty","force","fragment","test","dataIndex","smartDefaults","entries","$source","useXDeprecatedProvider","onUsage","_data","dataCxt","parentDataProperty","dataPathArr","dataLevel","p","str","replace"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CoreSchemaRegistry = exports.SchemaValidationException = void 0;\nconst ajv_1 = __importDefault(require(\"ajv\"));\nconst ajv_formats_1 = __importDefault(require(\"ajv-formats\"));\nconst http = __importStar(require(\"http\"));\nconst https = __importStar(require(\"https\"));\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst Url = __importStar(require(\"url\"));\nconst exception_1 = require(\"../../exception/exception\");\nconst utils_1 = require(\"../../utils\");\nconst utils_2 = require(\"../utils\");\nconst utility_1 = require(\"./utility\");\nconst visitor_1 = require(\"./visitor\");\nclass SchemaValidationException extends exception_1.BaseException {\n    constructor(errors, baseMessage = 'Schema validation failed with the following errors:') {\n        if (!errors || errors.length === 0) {\n            super('Schema validation failed.');\n            this.errors = [];\n            return;\n        }\n        const messages = SchemaValidationException.createMessages(errors);\n        super(`${baseMessage}\\n  ${messages.join('\\n  ')}`);\n        this.errors = errors;\n    }\n    static createMessages(errors) {\n        if (!errors || errors.length === 0) {\n            return [];\n        }\n        const messages = errors.map((err) => {\n            var _a;\n            let message = `Data path ${JSON.stringify(err.instancePath)} ${err.message}`;\n            if (err.params) {\n                switch (err.keyword) {\n                    case 'additionalProperties':\n                        message += `(${err.params.additionalProperty})`;\n                        break;\n                    case 'enum':\n                        message += `. Allowed values are: ${(_a = err.params.allowedValues) === null || _a === void 0 ? void 0 : _a.map((v) => `\"${v}\"`).join(', ')}`;\n                        break;\n                }\n            }\n            return message + '.';\n        });\n        return messages;\n    }\n}\nexports.SchemaValidationException = SchemaValidationException;\nclass CoreSchemaRegistry {\n    constructor(formats = []) {\n        this._uriCache = new Map();\n        this._uriHandlers = new Set();\n        this._pre = new utils_1.PartiallyOrderedSet();\n        this._post = new utils_1.PartiallyOrderedSet();\n        this._smartDefaultKeyword = false;\n        this._sourceMap = new Map();\n        this._ajv = new ajv_1.default({\n            strict: false,\n            loadSchema: (uri) => this._fetch(uri),\n            passContext: true,\n        });\n        (0, ajv_formats_1.default)(this._ajv);\n        for (const format of formats) {\n            this.addFormat(format);\n        }\n    }\n    async _fetch(uri) {\n        const maybeSchema = this._uriCache.get(uri);\n        if (maybeSchema) {\n            return maybeSchema;\n        }\n        // Try all handlers, one after the other.\n        for (const handler of this._uriHandlers) {\n            let handlerResult = handler(uri);\n            if (handlerResult === null || handlerResult === undefined) {\n                continue;\n            }\n            if ((0, rxjs_1.isObservable)(handlerResult)) {\n                handlerResult = handlerResult.toPromise();\n            }\n            const value = await handlerResult;\n            this._uriCache.set(uri, value);\n            return value;\n        }\n        // If none are found, handle using http client.\n        return new Promise((resolve, reject) => {\n            const url = new Url.URL(uri);\n            const client = url.protocol === 'https:' ? https : http;\n            client.get(url, (res) => {\n                if (!res.statusCode || res.statusCode >= 300) {\n                    // Consume the rest of the data to free memory.\n                    res.resume();\n                    reject(new Error(`Request failed. Status Code: ${res.statusCode}`));\n                }\n                else {\n                    res.setEncoding('utf8');\n                    let data = '';\n                    res.on('data', (chunk) => {\n                        data += chunk;\n                    });\n                    res.on('end', () => {\n                        try {\n                            const json = JSON.parse(data);\n                            this._uriCache.set(uri, json);\n                            resolve(json);\n                        }\n                        catch (err) {\n                            reject(err);\n                        }\n                    });\n                }\n            });\n        });\n    }\n    /**\n     * Add a transformation step before the validation of any Json.\n     * @param {JsonVisitor} visitor The visitor to transform every value.\n     * @param {JsonVisitor[]} deps A list of other visitors to run before.\n     */\n    addPreTransform(visitor, deps) {\n        this._pre.add(visitor, deps);\n    }\n    /**\n     * Add a transformation step after the validation of any Json. The JSON will not be validated\n     * after the POST, so if transformations are not compatible with the Schema it will not result\n     * in an error.\n     * @param {JsonVisitor} visitor The visitor to transform every value.\n     * @param {JsonVisitor[]} deps A list of other visitors to run before.\n     */\n    addPostTransform(visitor, deps) {\n        this._post.add(visitor, deps);\n    }\n    _resolver(ref, validate) {\n        if (!validate || !ref) {\n            return {};\n        }\n        const schema = validate.schemaEnv.root.schema;\n        const id = typeof schema === 'object' ? schema.$id : null;\n        let fullReference = ref;\n        if (typeof id === 'string') {\n            fullReference = Url.resolve(id, ref);\n            if (ref.startsWith('#')) {\n                fullReference = id + fullReference;\n            }\n        }\n        const resolvedSchema = this._ajv.getSchema(fullReference);\n        return {\n            context: resolvedSchema === null || resolvedSchema === void 0 ? void 0 : resolvedSchema.schemaEnv.validate,\n            schema: resolvedSchema === null || resolvedSchema === void 0 ? void 0 : resolvedSchema.schema,\n        };\n    }\n    /**\n     * Flatten the Schema, resolving and replacing all the refs. Makes it into a synchronous schema\n     * that is also easier to traverse. Does not cache the result.\n     *\n     * @param schema The schema or URI to flatten.\n     * @returns An Observable of the flattened schema object.\n     * @deprecated since 11.2 without replacement.\n     * Producing a flatten schema document does not in all cases produce a schema with identical behavior to the original.\n     * See: https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.appendix.B.2\n     */\n    flatten(schema) {\n        return (0, rxjs_1.from)(this._flatten(schema));\n    }\n    async _flatten(schema) {\n        this._ajv.removeSchema(schema);\n        this._currentCompilationSchemaInfo = undefined;\n        const validate = await this._ajv.compileAsync(schema);\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        function visitor(current, pointer, parentSchema, index) {\n            if (current &&\n                parentSchema &&\n                index &&\n                (0, utils_2.isJsonObject)(current) &&\n                Object.prototype.hasOwnProperty.call(current, '$ref') &&\n                typeof current['$ref'] == 'string') {\n                const resolved = self._resolver(current['$ref'], validate);\n                if (resolved.schema) {\n                    parentSchema[index] = resolved.schema;\n                }\n            }\n        }\n        const schemaCopy = (0, utils_1.deepCopy)(validate.schema);\n        (0, visitor_1.visitJsonSchema)(schemaCopy, visitor);\n        return schemaCopy;\n    }\n    /**\n     * Compile and return a validation function for the Schema.\n     *\n     * @param schema The schema to validate. If a string, will fetch the schema before compiling it\n     * (using schema as a URI).\n     * @returns An Observable of the Validation function.\n     */\n    compile(schema) {\n        return (0, rxjs_1.from)(this._compile(schema)).pipe((0, operators_1.map)((validate) => (value, options) => (0, rxjs_1.from)(validate(value, options))));\n    }\n    async _compile(schema) {\n        if (typeof schema === 'boolean') {\n            return async (data) => ({ success: schema, data });\n        }\n        const schemaInfo = {\n            smartDefaultRecord: new Map(),\n            promptDefinitions: [],\n        };\n        this._ajv.removeSchema(schema);\n        let validator;\n        try {\n            this._currentCompilationSchemaInfo = schemaInfo;\n            validator = this._ajv.compile(schema);\n        }\n        catch (e) {\n            // This should eventually be refactored so that we we handle race condition where the same schema is validated at the same time.\n            if (!(e instanceof ajv_1.default.MissingRefError)) {\n                throw e;\n            }\n            validator = await this._ajv.compileAsync(schema);\n        }\n        finally {\n            this._currentCompilationSchemaInfo = undefined;\n        }\n        return async (data, options) => {\n            var _a;\n            const validationOptions = {\n                withPrompts: true,\n                applyPostTransforms: true,\n                applyPreTransforms: true,\n                ...options,\n            };\n            const validationContext = {\n                promptFieldsWithValue: new Set(),\n            };\n            // Apply pre-validation transforms\n            if (validationOptions.applyPreTransforms) {\n                for (const visitor of this._pre.values()) {\n                    data = await (0, visitor_1.visitJson)(data, visitor, schema, this._resolver.bind(this), validator).toPromise();\n                }\n            }\n            // Apply smart defaults\n            await this._applySmartDefaults(data, schemaInfo.smartDefaultRecord);\n            // Apply prompts\n            if (validationOptions.withPrompts) {\n                const visitor = (value, pointer) => {\n                    if (value !== undefined) {\n                        validationContext.promptFieldsWithValue.add(pointer);\n                    }\n                    return value;\n                };\n                if (typeof schema === 'object') {\n                    await (0, visitor_1.visitJson)(data, visitor, schema, this._resolver.bind(this), validator).toPromise();\n                }\n                const definitions = schemaInfo.promptDefinitions.filter((def) => !validationContext.promptFieldsWithValue.has(def.id));\n                if (definitions.length > 0) {\n                    await this._applyPrompts(data, definitions);\n                }\n            }\n            // Validate using ajv\n            try {\n                const success = await validator.call(validationContext, data);\n                if (!success) {\n                    return { data, success, errors: (_a = validator.errors) !== null && _a !== void 0 ? _a : [] };\n                }\n            }\n            catch (error) {\n                if (error instanceof ajv_1.default.ValidationError) {\n                    return { data, success: false, errors: error.errors };\n                }\n                throw error;\n            }\n            // Apply post-validation transforms\n            if (validationOptions.applyPostTransforms) {\n                for (const visitor of this._post.values()) {\n                    data = await (0, visitor_1.visitJson)(data, visitor, schema, this._resolver.bind(this), validator).toPromise();\n                }\n            }\n            return { data, success: true };\n        };\n    }\n    addFormat(format) {\n        this._ajv.addFormat(format.name, format.formatter);\n    }\n    addSmartDefaultProvider(source, provider) {\n        if (this._sourceMap.has(source)) {\n            throw new Error(source);\n        }\n        this._sourceMap.set(source, provider);\n        if (!this._smartDefaultKeyword) {\n            this._smartDefaultKeyword = true;\n            this._ajv.addKeyword({\n                keyword: '$default',\n                errors: false,\n                valid: true,\n                compile: (schema, _parentSchema, it) => {\n                    const compilationSchemInfo = this._currentCompilationSchemaInfo;\n                    if (compilationSchemInfo === undefined) {\n                        return () => true;\n                    }\n                    // We cheat, heavily.\n                    const pathArray = this.normalizeDataPathArr(it);\n                    compilationSchemInfo.smartDefaultRecord.set(JSON.stringify(pathArray), schema);\n                    return () => true;\n                },\n                metaSchema: {\n                    type: 'object',\n                    properties: {\n                        '$source': { type: 'string' },\n                    },\n                    additionalProperties: true,\n                    required: ['$source'],\n                },\n            });\n        }\n    }\n    registerUriHandler(handler) {\n        this._uriHandlers.add(handler);\n    }\n    usePromptProvider(provider) {\n        const isSetup = !!this._promptProvider;\n        this._promptProvider = provider;\n        if (isSetup) {\n            return;\n        }\n        this._ajv.addKeyword({\n            keyword: 'x-prompt',\n            errors: false,\n            valid: true,\n            compile: (schema, parentSchema, it) => {\n                const compilationSchemInfo = this._currentCompilationSchemaInfo;\n                if (!compilationSchemInfo) {\n                    return () => true;\n                }\n                const path = '/' + this.normalizeDataPathArr(it).join('/');\n                let type;\n                let items;\n                let message;\n                if (typeof schema == 'string') {\n                    message = schema;\n                }\n                else {\n                    message = schema.message;\n                    type = schema.type;\n                    items = schema.items;\n                }\n                const propertyTypes = (0, utility_1.getTypesOfSchema)(parentSchema);\n                if (!type) {\n                    if (propertyTypes.size === 1 && propertyTypes.has('boolean')) {\n                        type = 'confirmation';\n                    }\n                    else if (Array.isArray(parentSchema.enum)) {\n                        type = 'list';\n                    }\n                    else if (propertyTypes.size === 1 &&\n                        propertyTypes.has('array') &&\n                        parentSchema.items &&\n                        Array.isArray(parentSchema.items.enum)) {\n                        type = 'list';\n                    }\n                    else {\n                        type = 'input';\n                    }\n                }\n                let multiselect;\n                if (type === 'list') {\n                    multiselect =\n                        schema.multiselect === undefined\n                            ? propertyTypes.size === 1 && propertyTypes.has('array')\n                            : schema.multiselect;\n                    const enumValues = multiselect\n                        ? parentSchema.items &&\n                            parentSchema.items.enum\n                        : parentSchema.enum;\n                    if (!items && Array.isArray(enumValues)) {\n                        items = [];\n                        for (const value of enumValues) {\n                            if (typeof value == 'string') {\n                                items.push(value);\n                            }\n                            else if (typeof value == 'object') {\n                                // Invalid\n                            }\n                            else {\n                                items.push({ label: value.toString(), value });\n                            }\n                        }\n                    }\n                }\n                const definition = {\n                    id: path,\n                    type,\n                    message,\n                    raw: schema,\n                    items,\n                    multiselect,\n                    propertyTypes,\n                    default: typeof parentSchema.default == 'object' &&\n                        parentSchema.default !== null &&\n                        !Array.isArray(parentSchema.default)\n                        ? undefined\n                        : parentSchema.default,\n                    async validator(data) {\n                        var _a;\n                        try {\n                            const result = await it.self.validate(parentSchema, data);\n                            // If the schema is sync then false will be returned on validation failure\n                            if (result) {\n                                return result;\n                            }\n                            else if ((_a = it.self.errors) === null || _a === void 0 ? void 0 : _a.length) {\n                                // Validation errors will be present on the Ajv instance when sync\n                                return it.self.errors[0].message;\n                            }\n                        }\n                        catch (e) {\n                            // If the schema is async then an error will be thrown on validation failure\n                            if (Array.isArray(e.errors) && e.errors.length) {\n                                return e.errors[0].message;\n                            }\n                        }\n                        return false;\n                    },\n                };\n                compilationSchemInfo.promptDefinitions.push(definition);\n                return function () {\n                    // If 'this' is undefined in the call, then it defaults to the global\n                    // 'this'.\n                    if (this && this.promptFieldsWithValue) {\n                        this.promptFieldsWithValue.add(path);\n                    }\n                    return true;\n                };\n            },\n            metaSchema: {\n                oneOf: [\n                    { type: 'string' },\n                    {\n                        type: 'object',\n                        properties: {\n                            'type': { type: 'string' },\n                            'message': { type: 'string' },\n                        },\n                        additionalProperties: true,\n                        required: ['message'],\n                    },\n                ],\n            },\n        });\n    }\n    async _applyPrompts(data, prompts) {\n        const provider = this._promptProvider;\n        if (!provider) {\n            return;\n        }\n        const answers = await (0, rxjs_1.from)(provider(prompts)).toPromise();\n        for (const path in answers) {\n            const pathFragments = path.split('/').slice(1);\n            CoreSchemaRegistry._set(data, pathFragments, answers[path], null, undefined, true);\n        }\n    }\n    static _set(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data, fragments, value, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parent = null, parentProperty, force) {\n        for (let index = 0; index < fragments.length; index++) {\n            const fragment = fragments[index];\n            if (/^i\\d+$/.test(fragment)) {\n                if (!Array.isArray(data)) {\n                    return;\n                }\n                for (let dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                    CoreSchemaRegistry._set(data[dataIndex], fragments.slice(index + 1), value, data, `${dataIndex}`);\n                }\n                return;\n            }\n            if (!data && parent !== null && parentProperty) {\n                data = parent[parentProperty] = {};\n            }\n            parent = data;\n            parentProperty = fragment;\n            data = data[fragment];\n        }\n        if (parent && parentProperty && (force || parent[parentProperty] === undefined)) {\n            parent[parentProperty] = value;\n        }\n    }\n    async _applySmartDefaults(data, smartDefaults) {\n        for (const [pointer, schema] of smartDefaults.entries()) {\n            const fragments = JSON.parse(pointer);\n            const source = this._sourceMap.get(schema.$source);\n            if (!source) {\n                continue;\n            }\n            let value = source(schema);\n            if ((0, rxjs_1.isObservable)(value)) {\n                value = await value.toPromise();\n            }\n            CoreSchemaRegistry._set(data, fragments, value);\n        }\n    }\n    useXDeprecatedProvider(onUsage) {\n        this._ajv.addKeyword({\n            keyword: 'x-deprecated',\n            validate: (schema, _data, _parentSchema, dataCxt) => {\n                if (schema) {\n                    onUsage(`Option \"${dataCxt === null || dataCxt === void 0 ? void 0 : dataCxt.parentDataProperty}\" is deprecated${typeof schema == 'string' ? ': ' + schema : '.'}`);\n                }\n                return true;\n            },\n            errors: false,\n        });\n    }\n    normalizeDataPathArr(it) {\n        return it.dataPathArr\n            .slice(1, it.dataLevel + 1)\n            .map((p) => (typeof p === 'number' ? p : p.str.replace(/\"/g, '')));\n    }\n}\nexports.CoreSchemaRegistry = CoreSchemaRegistry;\n"]},"metadata":{},"sourceType":"script"}