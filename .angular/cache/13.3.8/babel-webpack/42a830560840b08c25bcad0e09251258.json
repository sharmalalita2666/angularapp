{"ast":null,"code":"'use strict';\n/**\n * Base prompt implementation\n * Should be extended by prompt types.\n */\n\nconst _ = {\n  assign: require('lodash/assign'),\n  defaults: require('lodash/defaults'),\n  clone: require('lodash/clone')\n};\n\nconst chalk = require('chalk');\n\nconst runAsync = require('run-async');\n\nconst {\n  filter,\n  flatMap,\n  share,\n  take,\n  takeUntil\n} = require('rxjs/operators');\n\nconst Choices = require('../objects/choices');\n\nconst ScreenManager = require('../utils/screen-manager');\n\nclass Prompt {\n  constructor(question, rl, answers) {\n    // Setup instance defaults property\n    _.assign(this, {\n      answers,\n      status: 'pending'\n    }); // Set defaults prompt options\n\n\n    this.opt = _.defaults(_.clone(question), {\n      validate: () => true,\n      validatingText: '',\n      filter: val => val,\n      filteringText: '',\n      when: () => true,\n      suffix: '',\n      prefix: chalk.green('?')\n    }); // Make sure name is present\n\n    if (!this.opt.name) {\n      this.throwParamError('name');\n    } // Set default message if no message defined\n\n\n    if (!this.opt.message) {\n      this.opt.message = this.opt.name + ':';\n    } // Normalize choices\n\n\n    if (Array.isArray(this.opt.choices)) {\n      this.opt.choices = new Choices(this.opt.choices, answers);\n    }\n\n    this.rl = rl;\n    this.screen = new ScreenManager(this.rl);\n  }\n  /**\n   * Start the Inquiry session and manage output value filtering\n   * @return {Promise}\n   */\n\n\n  run() {\n    return new Promise((resolve, reject) => {\n      this._run(value => resolve(value), error => reject(error));\n    });\n  } // Default noop (this one should be overwritten in prompts)\n\n\n  _run(cb) {\n    cb();\n  }\n  /**\n   * Throw an error telling a required parameter is missing\n   * @param  {String} name Name of the missing param\n   * @return {Throw Error}\n   */\n\n\n  throwParamError(name) {\n    throw new Error('You must provide a `' + name + '` parameter');\n  }\n  /**\n   * Called when the UI closes. Override to do any specific cleanup necessary\n   */\n\n\n  close() {\n    this.screen.releaseCursor();\n  }\n  /**\n   * Run the provided validation method each time a submit event occur.\n   * @param  {Rx.Observable} submit - submit event flow\n   * @return {Object}        Object containing two observables: `success` and `error`\n   */\n\n\n  handleSubmitEvents(submit) {\n    const self = this;\n    const validate = runAsync(this.opt.validate);\n    const asyncFilter = runAsync(this.opt.filter);\n    const validation = submit.pipe(flatMap(value => {\n      this.startSpinner(value, this.opt.filteringText);\n      return asyncFilter(value, self.answers).then(filteredValue => {\n        this.startSpinner(filteredValue, this.opt.validatingText);\n        return validate(filteredValue, self.answers).then(isValid => ({\n          isValid,\n          value: filteredValue\n        }), err => ({\n          isValid: err,\n          value: filteredValue\n        }));\n      }, err => ({\n        isValid: err\n      }));\n    }), share());\n    const success = validation.pipe(filter(state => state.isValid === true), take(1));\n    const error = validation.pipe(filter(state => state.isValid !== true), takeUntil(success));\n    return {\n      success,\n      error\n    };\n  }\n\n  startSpinner(value, bottomContent) {\n    value = this.getSpinningValue(value); // If the question will spin, cut off the prefix (for layout purposes)\n\n    const content = bottomContent ? this.getQuestion() + value : this.getQuestion().slice(this.opt.prefix.length + 1) + value;\n    this.screen.renderWithSpinner(content, bottomContent);\n  }\n  /**\n   * Allow override, e.g. for password prompts\n   * See: https://github.com/SBoudrias/Inquirer.js/issues/1022\n   *\n   * @return {String} value to display while spinning\n   */\n\n\n  getSpinningValue(value) {\n    return value;\n  }\n  /**\n   * Generate the prompt question string\n   * @return {String} prompt question string\n   */\n\n\n  getQuestion() {\n    let message = (this.opt.prefix ? this.opt.prefix + ' ' : '') + chalk.bold(this.opt.message) + this.opt.suffix + chalk.reset(' '); // Append the default if available, and if question isn't touched/answered\n\n    if (this.opt.default != null && this.status !== 'touched' && this.status !== 'answered') {\n      // If default password is supplied, hide it\n      if (this.opt.type === 'password') {\n        message += chalk.italic.dim('[hidden] ');\n      } else {\n        message += chalk.dim('(' + this.opt.default + ') ');\n      }\n    }\n\n    return message;\n  }\n\n}\n\nmodule.exports = Prompt;","map":{"version":3,"sources":["/home/unthinkable-lap-0268/Documents/angularProject/node_modules/inquirer/lib/prompts/base.js"],"names":["_","assign","require","defaults","clone","chalk","runAsync","filter","flatMap","share","take","takeUntil","Choices","ScreenManager","Prompt","constructor","question","rl","answers","status","opt","validate","validatingText","val","filteringText","when","suffix","prefix","green","name","throwParamError","message","Array","isArray","choices","screen","run","Promise","resolve","reject","_run","value","error","cb","Error","close","releaseCursor","handleSubmitEvents","submit","self","asyncFilter","validation","pipe","startSpinner","then","filteredValue","isValid","err","success","state","bottomContent","getSpinningValue","content","getQuestion","slice","length","renderWithSpinner","bold","reset","default","type","italic","dim","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * Base prompt implementation\n * Should be extended by prompt types.\n */\nconst _ = {\n  assign: require('lodash/assign'),\n  defaults: require('lodash/defaults'),\n  clone: require('lodash/clone'),\n};\nconst chalk = require('chalk');\nconst runAsync = require('run-async');\nconst { filter, flatMap, share, take, takeUntil } = require('rxjs/operators');\nconst Choices = require('../objects/choices');\nconst ScreenManager = require('../utils/screen-manager');\n\nclass Prompt {\n  constructor(question, rl, answers) {\n    // Setup instance defaults property\n    _.assign(this, {\n      answers,\n      status: 'pending',\n    });\n\n    // Set defaults prompt options\n    this.opt = _.defaults(_.clone(question), {\n      validate: () => true,\n      validatingText: '',\n      filter: (val) => val,\n      filteringText: '',\n      when: () => true,\n      suffix: '',\n      prefix: chalk.green('?'),\n    });\n\n    // Make sure name is present\n    if (!this.opt.name) {\n      this.throwParamError('name');\n    }\n\n    // Set default message if no message defined\n    if (!this.opt.message) {\n      this.opt.message = this.opt.name + ':';\n    }\n\n    // Normalize choices\n    if (Array.isArray(this.opt.choices)) {\n      this.opt.choices = new Choices(this.opt.choices, answers);\n    }\n\n    this.rl = rl;\n    this.screen = new ScreenManager(this.rl);\n  }\n\n  /**\n   * Start the Inquiry session and manage output value filtering\n   * @return {Promise}\n   */\n\n  run() {\n    return new Promise((resolve, reject) => {\n      this._run(\n        (value) => resolve(value),\n        (error) => reject(error)\n      );\n    });\n  }\n\n  // Default noop (this one should be overwritten in prompts)\n  _run(cb) {\n    cb();\n  }\n\n  /**\n   * Throw an error telling a required parameter is missing\n   * @param  {String} name Name of the missing param\n   * @return {Throw Error}\n   */\n\n  throwParamError(name) {\n    throw new Error('You must provide a `' + name + '` parameter');\n  }\n\n  /**\n   * Called when the UI closes. Override to do any specific cleanup necessary\n   */\n  close() {\n    this.screen.releaseCursor();\n  }\n\n  /**\n   * Run the provided validation method each time a submit event occur.\n   * @param  {Rx.Observable} submit - submit event flow\n   * @return {Object}        Object containing two observables: `success` and `error`\n   */\n  handleSubmitEvents(submit) {\n    const self = this;\n    const validate = runAsync(this.opt.validate);\n    const asyncFilter = runAsync(this.opt.filter);\n    const validation = submit.pipe(\n      flatMap((value) => {\n        this.startSpinner(value, this.opt.filteringText);\n        return asyncFilter(value, self.answers).then(\n          (filteredValue) => {\n            this.startSpinner(filteredValue, this.opt.validatingText);\n            return validate(filteredValue, self.answers).then(\n              (isValid) => ({ isValid, value: filteredValue }),\n              (err) => ({ isValid: err, value: filteredValue })\n            );\n          },\n          (err) => ({ isValid: err })\n        );\n      }),\n      share()\n    );\n\n    const success = validation.pipe(\n      filter((state) => state.isValid === true),\n      take(1)\n    );\n    const error = validation.pipe(\n      filter((state) => state.isValid !== true),\n      takeUntil(success)\n    );\n\n    return {\n      success,\n      error,\n    };\n  }\n\n  startSpinner(value, bottomContent) {\n    value = this.getSpinningValue(value);\n    // If the question will spin, cut off the prefix (for layout purposes)\n    const content = bottomContent\n      ? this.getQuestion() + value\n      : this.getQuestion().slice(this.opt.prefix.length + 1) + value;\n\n    this.screen.renderWithSpinner(content, bottomContent);\n  }\n\n  /**\n   * Allow override, e.g. for password prompts\n   * See: https://github.com/SBoudrias/Inquirer.js/issues/1022\n   *\n   * @return {String} value to display while spinning\n   */\n  getSpinningValue(value) {\n    return value;\n  }\n\n  /**\n   * Generate the prompt question string\n   * @return {String} prompt question string\n   */\n  getQuestion() {\n    let message =\n      (this.opt.prefix ? this.opt.prefix + ' ' : '') +\n      chalk.bold(this.opt.message) +\n      this.opt.suffix +\n      chalk.reset(' ');\n\n    // Append the default if available, and if question isn't touched/answered\n    if (\n      this.opt.default != null &&\n      this.status !== 'touched' &&\n      this.status !== 'answered'\n    ) {\n      // If default password is supplied, hide it\n      if (this.opt.type === 'password') {\n        message += chalk.italic.dim('[hidden] ');\n      } else {\n        message += chalk.dim('(' + this.opt.default + ') ');\n      }\n    }\n\n    return message;\n  }\n}\n\nmodule.exports = Prompt;\n"]},"metadata":{},"sourceType":"script"}