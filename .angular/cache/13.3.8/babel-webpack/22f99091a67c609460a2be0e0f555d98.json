{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"/home/unthinkable-lap-0268/Documents/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isWarningEnabled = exports.getSchematicDefaults = exports.migrateLegacyGlobalConfig = exports.getConfiguredPackageManager = exports.getProjectByCwd = exports.validateWorkspace = exports.getWorkspaceRaw = exports.createGlobalSettings = exports.getWorkspace = exports.AngularWorkspace = exports.workspaceSchemaPath = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst fs_1 = require(\"fs\");\n\nconst os = __importStar(require(\"os\"));\n\nconst path = __importStar(require(\"path\"));\n\nconst find_up_1 = require(\"./find-up\");\n\nconst json_file_1 = require(\"./json-file\");\n\nfunction isJsonObject(value) {\n  return value !== undefined && core_1.json.isJsonObject(value);\n}\n\nfunction createWorkspaceHost() {\n  return {\n    readFile(path) {\n      return _asyncToGenerator(function* () {\n        return (0, fs_1.readFileSync)(path, 'utf-8');\n      })();\n    },\n\n    writeFile(path, data) {\n      return _asyncToGenerator(function* () {\n        (0, fs_1.writeFileSync)(path, data);\n      })();\n    },\n\n    isDirectory(path) {\n      return _asyncToGenerator(function* () {\n        try {\n          return (0, fs_1.statSync)(path).isDirectory();\n        } catch {\n          return false;\n        }\n      })();\n    },\n\n    isFile(path) {\n      return _asyncToGenerator(function* () {\n        try {\n          return (0, fs_1.statSync)(path).isFile();\n        } catch {\n          return false;\n        }\n      })();\n    }\n\n  };\n}\n\nfunction getSchemaLocation() {\n  return path.join(__dirname, '../lib/config/schema.json');\n}\n\nexports.workspaceSchemaPath = getSchemaLocation();\nconst configNames = ['angular.json', '.angular.json'];\nconst globalFileName = '.angular-config.json';\n\nfunction xdgConfigHome(home, configFile) {\n  // https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\n  const xdgConfigHome = process.env['XDG_CONFIG_HOME'] || path.join(home, '.config');\n  const xdgAngularHome = path.join(xdgConfigHome, 'angular');\n  return configFile ? path.join(xdgAngularHome, configFile) : xdgAngularHome;\n}\n\nfunction xdgConfigHomeOld(home) {\n  // Check the configuration files in the old location that should be:\n  // - $XDG_CONFIG_HOME/.angular-config.json (if XDG_CONFIG_HOME is set)\n  // - $HOME/.config/angular/.angular-config.json (otherwise)\n  const p = process.env['XDG_CONFIG_HOME'] || path.join(home, '.config', 'angular');\n  return path.join(p, '.angular-config.json');\n}\n\nfunction projectFilePath(projectPath) {\n  // Find the configuration, either where specified, in the Angular CLI project\n  // (if it's in node_modules) or from the current process.\n  return projectPath && (0, find_up_1.findUp)(configNames, projectPath) || (0, find_up_1.findUp)(configNames, process.cwd()) || (0, find_up_1.findUp)(configNames, __dirname);\n}\n\nfunction globalFilePath() {\n  const home = os.homedir();\n\n  if (!home) {\n    return null;\n  } // follow XDG Base Directory spec\n  // note that createGlobalSettings() will continue creating\n  // global file in home directory, with this user will have\n  // choice to move change its location to meet XDG convention\n\n\n  const xdgConfig = xdgConfigHome(home, 'config.json');\n\n  if ((0, fs_1.existsSync)(xdgConfig)) {\n    return xdgConfig;\n  } // NOTE: This check is for the old configuration location, for more\n  // information see https://github.com/angular/angular-cli/pull/20556\n\n\n  const xdgConfigOld = xdgConfigHomeOld(home);\n\n  if ((0, fs_1.existsSync)(xdgConfigOld)) {\n    /* eslint-disable no-console */\n    console.warn(`Old configuration location detected: ${xdgConfigOld}\\n` + `Please move the file to the new location ~/.config/angular/config.json`);\n    return xdgConfigOld;\n  }\n\n  const p = path.join(home, globalFileName);\n\n  if ((0, fs_1.existsSync)(p)) {\n    return p;\n  }\n\n  return null;\n}\n\nclass AngularWorkspace {\n  constructor(workspace, filePath) {\n    this.workspace = workspace;\n    this.filePath = filePath;\n    this.basePath = path.dirname(filePath);\n  }\n\n  get extensions() {\n    return this.workspace.extensions;\n  }\n\n  get projects() {\n    return this.workspace.projects;\n  } // Temporary helper functions to support refactoring\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  getCli() {\n    return this.workspace.extensions['cli'] || {};\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  getProjectCli(projectName) {\n    const project = this.workspace.projects.get(projectName);\n    return (project === null || project === void 0 ? void 0 : project.extensions['cli']) || {};\n  }\n\n  static load(workspaceFilePath) {\n    return _asyncToGenerator(function* () {\n      const oldConfigFileNames = ['.angular-cli.json', 'angular-cli.json'];\n\n      if (oldConfigFileNames.includes(path.basename(workspaceFilePath))) {\n        // 1.x file format\n        // Create an empty workspace to allow update to be used\n        return new AngularWorkspace({\n          extensions: {},\n          projects: new core_1.workspaces.ProjectDefinitionCollection()\n        }, workspaceFilePath);\n      }\n\n      const result = yield core_1.workspaces.readWorkspace(workspaceFilePath, createWorkspaceHost(), core_1.workspaces.WorkspaceFormat.JSON);\n      return new AngularWorkspace(result.workspace, workspaceFilePath);\n    })();\n  }\n\n}\n\nexports.AngularWorkspace = AngularWorkspace;\nconst cachedWorkspaces = new Map();\n\nfunction getWorkspace() {\n  return _getWorkspace.apply(this, arguments);\n}\n\nfunction _getWorkspace() {\n  _getWorkspace = _asyncToGenerator(function* (level = 'local') {\n    const cached = cachedWorkspaces.get(level);\n\n    if (cached !== undefined) {\n      return cached;\n    }\n\n    const configPath = level === 'local' ? projectFilePath() : globalFilePath();\n\n    if (!configPath) {\n      cachedWorkspaces.set(level, null);\n      return null;\n    }\n\n    try {\n      const workspace = yield AngularWorkspace.load(configPath);\n      cachedWorkspaces.set(level, workspace);\n      return workspace;\n    } catch (error) {\n      throw new Error(`Workspace config file cannot be loaded: ${configPath}` + `\\n${error instanceof Error ? error.message : error}`);\n    }\n  });\n  return _getWorkspace.apply(this, arguments);\n}\n\nexports.getWorkspace = getWorkspace;\n\nfunction createGlobalSettings() {\n  const home = os.homedir();\n\n  if (!home) {\n    throw new Error('No home directory found.');\n  }\n\n  const globalPath = path.join(home, globalFileName);\n  (0, fs_1.writeFileSync)(globalPath, JSON.stringify({\n    version: 1\n  }));\n  return globalPath;\n}\n\nexports.createGlobalSettings = createGlobalSettings;\n\nfunction getWorkspaceRaw(level = 'local') {\n  let configPath = level === 'local' ? projectFilePath() : globalFilePath();\n\n  if (!configPath) {\n    if (level === 'global') {\n      configPath = createGlobalSettings();\n    } else {\n      return [null, null];\n    }\n  }\n\n  return [new json_file_1.JSONFile(configPath), configPath];\n}\n\nexports.getWorkspaceRaw = getWorkspaceRaw;\n\nfunction validateWorkspace(_x) {\n  return _validateWorkspace.apply(this, arguments);\n}\n\nfunction _validateWorkspace() {\n  _validateWorkspace = _asyncToGenerator(function* (data) {\n    const schema = (0, json_file_1.readAndParseJson)(path.join(__dirname, '../lib/config/schema.json'));\n    const {\n      formats\n    } = yield Promise.resolve().then(() => __importStar(require('@angular-devkit/schematics')));\n    const registry = new core_1.json.schema.CoreSchemaRegistry(formats.standardFormats);\n    const validator = yield registry.compile(schema).toPromise();\n    const {\n      success,\n      errors\n    } = yield validator(data).toPromise();\n\n    if (!success) {\n      throw new core_1.json.schema.SchemaValidationException(errors);\n    }\n  });\n  return _validateWorkspace.apply(this, arguments);\n}\n\nexports.validateWorkspace = validateWorkspace;\n\nfunction findProjectByPath(workspace, location) {\n  const isInside = (base, potential) => {\n    const absoluteBase = path.resolve(workspace.basePath, base);\n    const absolutePotential = path.resolve(workspace.basePath, potential);\n    const relativePotential = path.relative(absoluteBase, absolutePotential);\n\n    if (!relativePotential.startsWith('..') && !path.isAbsolute(relativePotential)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const projects = Array.from(workspace.projects).map(([name, project]) => [project.root, name]).filter(tuple => isInside(tuple[0], location)) // Sort tuples by depth, with the deeper ones first. Since the first member is a path and\n  // we filtered all invalid paths, the longest will be the deepest (and in case of equality\n  // the sort is stable and the first declared project will win).\n  .sort((a, b) => b[0].length - a[0].length);\n\n  if (projects.length === 0) {\n    return null;\n  } else if (projects.length > 1) {\n    const found = new Set();\n    const sameRoots = projects.filter(v => {\n      if (!found.has(v[0])) {\n        found.add(v[0]);\n        return false;\n      }\n\n      return true;\n    });\n\n    if (sameRoots.length > 0) {\n      // Ambiguous location - cannot determine a project\n      return null;\n    }\n  }\n\n  return projects[0][1];\n}\n\nfunction getProjectByCwd(workspace) {\n  if (workspace.projects.size === 1) {\n    // If there is only one project, return that one.\n    return Array.from(workspace.projects.keys())[0];\n  }\n\n  const project = findProjectByPath(workspace, process.cwd());\n\n  if (project) {\n    return project;\n  }\n\n  const defaultProject = workspace.extensions['defaultProject'];\n\n  if (defaultProject && typeof defaultProject === 'string') {\n    // If there is a default project name, return it.\n    return defaultProject;\n  }\n\n  return null;\n}\n\nexports.getProjectByCwd = getProjectByCwd;\n\nfunction getConfiguredPackageManager() {\n  return _getConfiguredPackageManager.apply(this, arguments);\n}\n\nfunction _getConfiguredPackageManager() {\n  _getConfiguredPackageManager = _asyncToGenerator(function* () {\n    var _a;\n\n    const getPackageManager = source => {\n      if (isJsonObject(source)) {\n        const value = source['packageManager'];\n\n        if (value && typeof value === 'string') {\n          return value;\n        }\n      }\n    };\n\n    let result;\n    const workspace = yield getWorkspace('local');\n\n    if (workspace) {\n      const project = getProjectByCwd(workspace);\n\n      if (project) {\n        result = getPackageManager((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['cli']);\n      }\n\n      result = result !== null && result !== void 0 ? result : getPackageManager(workspace.extensions['cli']);\n    }\n\n    if (result === undefined) {\n      const globalOptions = yield getWorkspace('global');\n      result = getPackageManager(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['cli']);\n\n      if (!workspace && !globalOptions) {\n        // Only check legacy if updated workspace is not found\n        result = getLegacyPackageManager();\n      }\n    } // Default to null\n\n\n    return result !== null && result !== void 0 ? result : null;\n  });\n  return _getConfiguredPackageManager.apply(this, arguments);\n}\n\nexports.getConfiguredPackageManager = getConfiguredPackageManager;\n\nfunction migrateLegacyGlobalConfig() {\n  const homeDir = os.homedir();\n\n  if (homeDir) {\n    const legacyGlobalConfigPath = path.join(homeDir, '.angular-cli.json');\n\n    if ((0, fs_1.existsSync)(legacyGlobalConfigPath)) {\n      const legacy = (0, json_file_1.readAndParseJson)(legacyGlobalConfigPath);\n\n      if (!isJsonObject(legacy)) {\n        return false;\n      }\n\n      const cli = {};\n\n      if (legacy.packageManager && typeof legacy.packageManager == 'string' && legacy.packageManager !== 'default') {\n        cli['packageManager'] = legacy.packageManager;\n      }\n\n      if (isJsonObject(legacy.defaults) && isJsonObject(legacy.defaults.schematics) && typeof legacy.defaults.schematics.collection == 'string') {\n        cli['defaultCollection'] = legacy.defaults.schematics.collection;\n      }\n\n      if (isJsonObject(legacy.warnings)) {\n        const warnings = {};\n\n        if (typeof legacy.warnings.versionMismatch == 'boolean') {\n          warnings['versionMismatch'] = legacy.warnings.versionMismatch;\n        }\n\n        if (Object.getOwnPropertyNames(warnings).length > 0) {\n          cli['warnings'] = warnings;\n        }\n      }\n\n      if (Object.getOwnPropertyNames(cli).length > 0) {\n        const globalPath = path.join(homeDir, globalFileName);\n        (0, fs_1.writeFileSync)(globalPath, JSON.stringify({\n          version: 1,\n          cli\n        }, null, 2));\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nexports.migrateLegacyGlobalConfig = migrateLegacyGlobalConfig; // Fallback, check for packageManager in config file in v1.* global config.\n\nfunction getLegacyPackageManager() {\n  const homeDir = os.homedir();\n\n  if (homeDir) {\n    const legacyGlobalConfigPath = path.join(homeDir, '.angular-cli.json');\n\n    if ((0, fs_1.existsSync)(legacyGlobalConfigPath)) {\n      const legacy = (0, json_file_1.readAndParseJson)(legacyGlobalConfigPath);\n\n      if (!isJsonObject(legacy)) {\n        return null;\n      }\n\n      if (legacy.packageManager && typeof legacy.packageManager === 'string' && legacy.packageManager !== 'default') {\n        return legacy.packageManager;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction getSchematicDefaults(_x2, _x3, _x4) {\n  return _getSchematicDefaults.apply(this, arguments);\n}\n\nfunction _getSchematicDefaults() {\n  _getSchematicDefaults = _asyncToGenerator(function* (collection, schematic, project) {\n    var _a;\n\n    const result = {};\n\n    const mergeOptions = source => {\n      if (isJsonObject(source)) {\n        // Merge options from the qualified name\n        Object.assign(result, source[`${collection}:${schematic}`]); // Merge options from nested collection schematics\n\n        const collectionOptions = source[collection];\n\n        if (isJsonObject(collectionOptions)) {\n          Object.assign(result, collectionOptions[schematic]);\n        }\n      }\n    }; // Global level schematic options\n\n\n    const globalOptions = yield getWorkspace('global');\n    mergeOptions(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['schematics']);\n    const workspace = yield getWorkspace('local');\n\n    if (workspace) {\n      // Workspace level schematic options\n      mergeOptions(workspace.extensions['schematics']);\n      project = project || getProjectByCwd(workspace);\n\n      if (project) {\n        // Project level schematic options\n        mergeOptions((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['schematics']);\n      }\n    }\n\n    return result;\n  });\n  return _getSchematicDefaults.apply(this, arguments);\n}\n\nexports.getSchematicDefaults = getSchematicDefaults;\n\nfunction isWarningEnabled(_x5) {\n  return _isWarningEnabled.apply(this, arguments);\n}\n\nfunction _isWarningEnabled() {\n  _isWarningEnabled = _asyncToGenerator(function* (warning) {\n    var _a;\n\n    const getWarning = source => {\n      if (isJsonObject(source)) {\n        const warnings = source['warnings'];\n\n        if (isJsonObject(warnings)) {\n          const value = warnings[warning];\n\n          if (typeof value == 'boolean') {\n            return value;\n          }\n        }\n      }\n    };\n\n    let result;\n    const workspace = yield getWorkspace('local');\n\n    if (workspace) {\n      const project = getProjectByCwd(workspace);\n\n      if (project) {\n        result = getWarning((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['cli']);\n      }\n\n      result = result !== null && result !== void 0 ? result : getWarning(workspace.extensions['cli']);\n    }\n\n    if (result === undefined) {\n      const globalOptions = yield getWorkspace('global');\n      result = getWarning(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['cli']);\n    } // All warnings are enabled by default\n\n\n    return result !== null && result !== void 0 ? result : true;\n  });\n  return _isWarningEnabled.apply(this, arguments);\n}\n\nexports.isWarningEnabled = isWarningEnabled;","map":{"version":3,"sources":["/home/unthinkable-lap-0268/Documents/angularProject/node_modules/@angular/cli/utilities/config.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","isWarningEnabled","getSchematicDefaults","migrateLegacyGlobalConfig","getConfiguredPackageManager","getProjectByCwd","validateWorkspace","getWorkspaceRaw","createGlobalSettings","getWorkspace","AngularWorkspace","workspaceSchemaPath","core_1","require","fs_1","os","path","find_up_1","json_file_1","isJsonObject","json","createWorkspaceHost","readFile","readFileSync","writeFile","data","writeFileSync","isDirectory","statSync","isFile","getSchemaLocation","join","__dirname","configNames","globalFileName","xdgConfigHome","home","configFile","process","env","xdgAngularHome","xdgConfigHomeOld","p","projectFilePath","projectPath","findUp","cwd","globalFilePath","homedir","xdgConfig","existsSync","xdgConfigOld","console","warn","constructor","workspace","filePath","basePath","dirname","extensions","projects","getCli","getProjectCli","projectName","project","load","workspaceFilePath","oldConfigFileNames","includes","basename","workspaces","ProjectDefinitionCollection","readWorkspace","WorkspaceFormat","JSON","cachedWorkspaces","Map","level","cached","configPath","set","error","Error","message","globalPath","stringify","version","JSONFile","schema","readAndParseJson","formats","Promise","resolve","then","registry","CoreSchemaRegistry","standardFormats","validator","compile","toPromise","success","errors","SchemaValidationException","findProjectByPath","location","isInside","base","potential","absoluteBase","absolutePotential","relativePotential","relative","startsWith","isAbsolute","Array","from","map","name","root","filter","tuple","sort","a","b","length","found","Set","sameRoots","has","add","size","keys","defaultProject","_a","getPackageManager","source","globalOptions","getLegacyPackageManager","homeDir","legacyGlobalConfigPath","legacy","cli","packageManager","defaults","schematics","collection","warnings","versionMismatch","getOwnPropertyNames","schematic","mergeOptions","assign","collectionOptions","warning","getWarning"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,KAAmCC,MAAM,CAACC,MAAP,GAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,EAAlB,EAAsB;AAC5F,MAAIA,EAAE,KAAKC,SAAX,EAAsBD,EAAE,GAAGD,CAAL;AACtB,MAAIG,IAAI,GAAGP,MAAM,CAACQ,wBAAP,CAAgCL,CAAhC,EAAmCC,CAAnC,CAAX;;AACA,MAAI,CAACG,IAAD,KAAU,SAASA,IAAT,GAAgB,CAACJ,CAAC,CAACM,UAAnB,GAAgCF,IAAI,CAACG,QAAL,IAAiBH,IAAI,CAACI,YAAhE,CAAJ,EAAmF;AACjFJ,IAAAA,IAAI,GAAG;AAAEK,MAAAA,UAAU,EAAE,IAAd;AAAoBC,MAAAA,GAAG,EAAE,YAAW;AAAE,eAAOV,CAAC,CAACC,CAAD,CAAR;AAAc;AAApD,KAAP;AACD;;AACDJ,EAAAA,MAAM,CAACc,cAAP,CAAsBZ,CAAtB,EAAyBG,EAAzB,EAA6BE,IAA7B;AACH,CAPwD,GAOnD,UAASL,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,EAAlB,EAAsB;AACxB,MAAIA,EAAE,KAAKC,SAAX,EAAsBD,EAAE,GAAGD,CAAL;AACtBF,EAAAA,CAAC,CAACG,EAAD,CAAD,GAAQF,CAAC,CAACC,CAAD,CAAT;AACH,CAVqB,CAAtB;;AAWA,IAAIW,kBAAkB,GAAI,QAAQ,KAAKA,kBAAd,KAAsCf,MAAM,CAACC,MAAP,GAAiB,UAASC,CAAT,EAAYc,CAAZ,EAAe;AAC3FhB,EAAAA,MAAM,CAACc,cAAP,CAAsBZ,CAAtB,EAAyB,SAAzB,EAAoC;AAAEU,IAAAA,UAAU,EAAE,IAAd;AAAoBK,IAAAA,KAAK,EAAED;AAA3B,GAApC;AACH,CAF8D,GAE1D,UAASd,CAAT,EAAYc,CAAZ,EAAe;AAChBd,EAAAA,CAAC,CAAC,SAAD,CAAD,GAAec,CAAf;AACH,CAJwB,CAAzB;;AAKA,IAAIE,YAAY,GAAI,QAAQ,KAAKA,YAAd,IAA+B,UAAUC,GAAV,EAAe;AAC7D,MAAIA,GAAG,IAAIA,GAAG,CAACV,UAAf,EAA2B,OAAOU,GAAP;AAC3B,MAAIC,MAAM,GAAG,EAAb;AACA,MAAID,GAAG,IAAI,IAAX,EAAiB,KAAK,IAAIf,CAAT,IAAce,GAAd,EAAmB,IAAIf,CAAC,KAAK,SAAN,IAAmBJ,MAAM,CAACqB,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,GAArC,EAA0Cf,CAA1C,CAAvB,EAAqEL,eAAe,CAACqB,MAAD,EAASD,GAAT,EAAcf,CAAd,CAAf;;AACzGW,EAAAA,kBAAkB,CAACK,MAAD,EAASD,GAAT,CAAlB;;AACA,SAAOC,MAAP;AACH,CAND;;AAOApB,MAAM,CAACc,cAAP,CAAsBU,OAAtB,EAA+B,YAA/B,EAA6C;AAAEP,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAO,OAAO,CAACC,gBAAR,GAA2BD,OAAO,CAACE,oBAAR,GAA+BF,OAAO,CAACG,yBAAR,GAAoCH,OAAO,CAACI,2BAAR,GAAsCJ,OAAO,CAACK,eAAR,GAA0BL,OAAO,CAACM,iBAAR,GAA4BN,OAAO,CAACO,eAAR,GAA0BP,OAAO,CAACQ,oBAAR,GAA+BR,OAAO,CAACS,YAAR,GAAuBT,OAAO,CAACU,gBAAR,GAA2BV,OAAO,CAACW,mBAAR,GAA8B,KAAK,CAAxU;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,sBAAD,CAAtB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,IAAD,CAApB;;AACA,MAAME,EAAE,GAAGrB,YAAY,CAACmB,OAAO,CAAC,IAAD,CAAR,CAAvB;;AACA,MAAMG,IAAI,GAAGtB,YAAY,CAACmB,OAAO,CAAC,MAAD,CAAR,CAAzB;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,aAAD,CAA3B;;AACA,SAASM,YAAT,CAAsB1B,KAAtB,EAA6B;AACzB,SAAOA,KAAK,KAAKX,SAAV,IAAuB8B,MAAM,CAACQ,IAAP,CAAYD,YAAZ,CAAyB1B,KAAzB,CAA9B;AACH;;AACD,SAAS4B,mBAAT,GAA+B;AAC3B,SAAO;AACGC,IAAAA,QAAN,CAAeN,IAAf,EAAqB;AAAA;AACjB,eAAO,CAAC,GAAGF,IAAI,CAACS,YAAT,EAAuBP,IAAvB,EAA6B,OAA7B,CAAP;AADiB;AAEpB,KAHE;;AAIGQ,IAAAA,SAAN,CAAgBR,IAAhB,EAAsBS,IAAtB,EAA4B;AAAA;AACxB,SAAC,GAAGX,IAAI,CAACY,aAAT,EAAwBV,IAAxB,EAA8BS,IAA9B;AADwB;AAE3B,KANE;;AAOGE,IAAAA,WAAN,CAAkBX,IAAlB,EAAwB;AAAA;AACpB,YAAI;AACA,iBAAO,CAAC,GAAGF,IAAI,CAACc,QAAT,EAAmBZ,IAAnB,EAAyBW,WAAzB,EAAP;AACH,SAFD,CAGA,MAAM;AACF,iBAAO,KAAP;AACH;AANmB;AAOvB,KAdE;;AAeGE,IAAAA,MAAN,CAAab,IAAb,EAAmB;AAAA;AACf,YAAI;AACA,iBAAO,CAAC,GAAGF,IAAI,CAACc,QAAT,EAAmBZ,IAAnB,EAAyBa,MAAzB,EAAP;AACH,SAFD,CAGA,MAAM;AACF,iBAAO,KAAP;AACH;AANc;AAOlB;;AAtBE,GAAP;AAwBH;;AACD,SAASC,iBAAT,GAA6B;AACzB,SAAOd,IAAI,CAACe,IAAL,CAAUC,SAAV,EAAqB,2BAArB,CAAP;AACH;;AACDhC,OAAO,CAACW,mBAAR,GAA8BmB,iBAAiB,EAA/C;AACA,MAAMG,WAAW,GAAG,CAAC,cAAD,EAAiB,eAAjB,CAApB;AACA,MAAMC,cAAc,GAAG,sBAAvB;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,UAA7B,EAAyC;AACrC;AACA,QAAMF,aAAa,GAAGG,OAAO,CAACC,GAAR,CAAY,iBAAZ,KAAkCvB,IAAI,CAACe,IAAL,CAAUK,IAAV,EAAgB,SAAhB,CAAxD;AACA,QAAMI,cAAc,GAAGxB,IAAI,CAACe,IAAL,CAAUI,aAAV,EAAyB,SAAzB,CAAvB;AACA,SAAOE,UAAU,GAAGrB,IAAI,CAACe,IAAL,CAAUS,cAAV,EAA0BH,UAA1B,CAAH,GAA2CG,cAA5D;AACH;;AACD,SAASC,gBAAT,CAA0BL,IAA1B,EAAgC;AAC5B;AACA;AACA;AACA,QAAMM,CAAC,GAAGJ,OAAO,CAACC,GAAR,CAAY,iBAAZ,KAAkCvB,IAAI,CAACe,IAAL,CAAUK,IAAV,EAAgB,SAAhB,EAA2B,SAA3B,CAA5C;AACA,SAAOpB,IAAI,CAACe,IAAL,CAAUW,CAAV,EAAa,sBAAb,CAAP;AACH;;AACD,SAASC,eAAT,CAAyBC,WAAzB,EAAsC;AAClC;AACA;AACA,SAASA,WAAW,IAAI,CAAC,GAAG3B,SAAS,CAAC4B,MAAd,EAAsBZ,WAAtB,EAAmCW,WAAnC,CAAhB,IACJ,CAAC,GAAG3B,SAAS,CAAC4B,MAAd,EAAsBZ,WAAtB,EAAmCK,OAAO,CAACQ,GAAR,EAAnC,CADI,IAEJ,CAAC,GAAG7B,SAAS,CAAC4B,MAAd,EAAsBZ,WAAtB,EAAmCD,SAAnC,CAFJ;AAGH;;AACD,SAASe,cAAT,GAA0B;AACtB,QAAMX,IAAI,GAAGrB,EAAE,CAACiC,OAAH,EAAb;;AACA,MAAI,CAACZ,IAAL,EAAW;AACP,WAAO,IAAP;AACH,GAJqB,CAKtB;AACA;AACA;AACA;;;AACA,QAAMa,SAAS,GAAGd,aAAa,CAACC,IAAD,EAAO,aAAP,CAA/B;;AACA,MAAI,CAAC,GAAGtB,IAAI,CAACoC,UAAT,EAAqBD,SAArB,CAAJ,EAAqC;AACjC,WAAOA,SAAP;AACH,GAZqB,CAatB;AACA;;;AACA,QAAME,YAAY,GAAGV,gBAAgB,CAACL,IAAD,CAArC;;AACA,MAAI,CAAC,GAAGtB,IAAI,CAACoC,UAAT,EAAqBC,YAArB,CAAJ,EAAwC;AACpC;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAc,wCAAuCF,YAAa,IAArD,GACR,wEADL;AAEA,WAAOA,YAAP;AACH;;AACD,QAAMT,CAAC,GAAG1B,IAAI,CAACe,IAAL,CAAUK,IAAV,EAAgBF,cAAhB,CAAV;;AACA,MAAI,CAAC,GAAGpB,IAAI,CAACoC,UAAT,EAAqBR,CAArB,CAAJ,EAA6B;AACzB,WAAOA,CAAP;AACH;;AACD,SAAO,IAAP;AACH;;AACD,MAAMhC,gBAAN,CAAuB;AACnB4C,EAAAA,WAAW,CAACC,SAAD,EAAYC,QAAZ,EAAsB;AAC7B,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgBzC,IAAI,CAAC0C,OAAL,CAAaF,QAAb,CAAhB;AACH;;AACa,MAAVG,UAAU,GAAG;AACb,WAAO,KAAKJ,SAAL,CAAeI,UAAtB;AACH;;AACW,MAARC,QAAQ,GAAG;AACX,WAAO,KAAKL,SAAL,CAAeK,QAAtB;AACH,GAXkB,CAYnB;AACA;;;AACAC,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKN,SAAL,CAAeI,UAAf,CAA0B,KAA1B,KAAoC,EAA3C;AACH,GAhBkB,CAiBnB;;;AACAG,EAAAA,aAAa,CAACC,WAAD,EAAc;AACvB,UAAMC,OAAO,GAAG,KAAKT,SAAL,CAAeK,QAAf,CAAwBvE,GAAxB,CAA4B0E,WAA5B,CAAhB;AACA,WAAO,CAACC,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACL,UAAR,CAAmB,KAAnB,CAAnD,KAAiF,EAAxF;AACH;;AACgB,SAAJM,IAAI,CAACC,iBAAD,EAAoB;AAAA;AACjC,YAAMC,kBAAkB,GAAG,CAAC,mBAAD,EAAsB,kBAAtB,CAA3B;;AACA,UAAIA,kBAAkB,CAACC,QAAnB,CAA4BpD,IAAI,CAACqD,QAAL,CAAcH,iBAAd,CAA5B,CAAJ,EAAmE;AAC/D;AACA;AACA,eAAO,IAAIxD,gBAAJ,CAAqB;AAAEiD,UAAAA,UAAU,EAAE,EAAd;AAAkBC,UAAAA,QAAQ,EAAE,IAAIhD,MAAM,CAAC0D,UAAP,CAAkBC,2BAAtB;AAA5B,SAArB,EAAwGL,iBAAxG,CAAP;AACH;;AACD,YAAMtE,MAAM,SAASgB,MAAM,CAAC0D,UAAP,CAAkBE,aAAlB,CAAgCN,iBAAhC,EAAmD7C,mBAAmB,EAAtE,EAA0ET,MAAM,CAAC0D,UAAP,CAAkBG,eAAlB,CAAkCC,IAA5G,CAArB;AACA,aAAO,IAAIhE,gBAAJ,CAAqBd,MAAM,CAAC2D,SAA5B,EAAuCW,iBAAvC,CAAP;AARiC;AASpC;;AA/BkB;;AAiCvBlE,OAAO,CAACU,gBAAR,GAA2BA,gBAA3B;AACA,MAAMiE,gBAAgB,GAAG,IAAIC,GAAJ,EAAzB;;SACenE,Y;;;;;oCAAf,WAA4BoE,KAAK,GAAG,OAApC,EAA6C;AACzC,UAAMC,MAAM,GAAGH,gBAAgB,CAACtF,GAAjB,CAAqBwF,KAArB,CAAf;;AACA,QAAIC,MAAM,KAAKhG,SAAf,EAA0B;AACtB,aAAOgG,MAAP;AACH;;AACD,UAAMC,UAAU,GAAGF,KAAK,KAAK,OAAV,GAAoBlC,eAAe,EAAnC,GAAwCI,cAAc,EAAzE;;AACA,QAAI,CAACgC,UAAL,EAAiB;AACbJ,MAAAA,gBAAgB,CAACK,GAAjB,CAAqBH,KAArB,EAA4B,IAA5B;AACA,aAAO,IAAP;AACH;;AACD,QAAI;AACA,YAAMtB,SAAS,SAAS7C,gBAAgB,CAACuD,IAAjB,CAAsBc,UAAtB,CAAxB;AACAJ,MAAAA,gBAAgB,CAACK,GAAjB,CAAqBH,KAArB,EAA4BtB,SAA5B;AACA,aAAOA,SAAP;AACH,KAJD,CAKA,OAAO0B,KAAP,EAAc;AACV,YAAM,IAAIC,KAAJ,CAAW,2CAA0CH,UAAW,EAAtD,GACX,KAAIE,KAAK,YAAYC,KAAjB,GAAyBD,KAAK,CAACE,OAA/B,GAAyCF,KAAM,EADlD,CAAN;AAEH;AACJ,G;;;;AACDjF,OAAO,CAACS,YAAR,GAAuBA,YAAvB;;AACA,SAASD,oBAAT,GAAgC;AAC5B,QAAM4B,IAAI,GAAGrB,EAAE,CAACiC,OAAH,EAAb;;AACA,MAAI,CAACZ,IAAL,EAAW;AACP,UAAM,IAAI8C,KAAJ,CAAU,0BAAV,CAAN;AACH;;AACD,QAAME,UAAU,GAAGpE,IAAI,CAACe,IAAL,CAAUK,IAAV,EAAgBF,cAAhB,CAAnB;AACA,GAAC,GAAGpB,IAAI,CAACY,aAAT,EAAwB0D,UAAxB,EAAoCV,IAAI,CAACW,SAAL,CAAe;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAf,CAApC;AACA,SAAOF,UAAP;AACH;;AACDpF,OAAO,CAACQ,oBAAR,GAA+BA,oBAA/B;;AACA,SAASD,eAAT,CAAyBsE,KAAK,GAAG,OAAjC,EAA0C;AACtC,MAAIE,UAAU,GAAGF,KAAK,KAAK,OAAV,GAAoBlC,eAAe,EAAnC,GAAwCI,cAAc,EAAvE;;AACA,MAAI,CAACgC,UAAL,EAAiB;AACb,QAAIF,KAAK,KAAK,QAAd,EAAwB;AACpBE,MAAAA,UAAU,GAAGvE,oBAAoB,EAAjC;AACH,KAFD,MAGK;AACD,aAAO,CAAC,IAAD,EAAO,IAAP,CAAP;AACH;AACJ;;AACD,SAAO,CAAC,IAAIU,WAAW,CAACqE,QAAhB,CAAyBR,UAAzB,CAAD,EAAuCA,UAAvC,CAAP;AACH;;AACD/E,OAAO,CAACO,eAAR,GAA0BA,eAA1B;;SACeD,iB;;;;;yCAAf,WAAiCmB,IAAjC,EAAuC;AACnC,UAAM+D,MAAM,GAAG,CAAC,GAAGtE,WAAW,CAACuE,gBAAhB,EAAkCzE,IAAI,CAACe,IAAL,CAAUC,SAAV,EAAqB,2BAArB,CAAlC,CAAf;AACA,UAAM;AAAE0D,MAAAA;AAAF,cAAoBC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAMnG,YAAY,CAACmB,OAAO,CAAC,4BAAD,CAAR,CAAzC,CAA1B;AACA,UAAMiF,QAAQ,GAAG,IAAIlF,MAAM,CAACQ,IAAP,CAAYoE,MAAZ,CAAmBO,kBAAvB,CAA0CL,OAAO,CAACM,eAAlD,CAAjB;AACA,UAAMC,SAAS,SAASH,QAAQ,CAACI,OAAT,CAAiBV,MAAjB,EAAyBW,SAAzB,EAAxB;AACA,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,cAA4BJ,SAAS,CAACxE,IAAD,CAAT,CAAgB0E,SAAhB,EAAlC;;AACA,QAAI,CAACC,OAAL,EAAc;AACV,YAAM,IAAIxF,MAAM,CAACQ,IAAP,CAAYoE,MAAZ,CAAmBc,yBAAvB,CAAiDD,MAAjD,CAAN;AACH;AACJ,G;;;;AACDrG,OAAO,CAACM,iBAAR,GAA4BA,iBAA5B;;AACA,SAASiG,iBAAT,CAA2BhD,SAA3B,EAAsCiD,QAAtC,EAAgD;AAC5C,QAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,SAAP,KAAqB;AAClC,UAAMC,YAAY,GAAG5F,IAAI,CAAC4E,OAAL,CAAarC,SAAS,CAACE,QAAvB,EAAiCiD,IAAjC,CAArB;AACA,UAAMG,iBAAiB,GAAG7F,IAAI,CAAC4E,OAAL,CAAarC,SAAS,CAACE,QAAvB,EAAiCkD,SAAjC,CAA1B;AACA,UAAMG,iBAAiB,GAAG9F,IAAI,CAAC+F,QAAL,CAAcH,YAAd,EAA4BC,iBAA5B,CAA1B;;AACA,QAAI,CAACC,iBAAiB,CAACE,UAAlB,CAA6B,IAA7B,CAAD,IAAuC,CAAChG,IAAI,CAACiG,UAAL,CAAgBH,iBAAhB,CAA5C,EAAgF;AAC5E,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GARD;;AASA,QAAMlD,QAAQ,GAAGsD,KAAK,CAACC,IAAN,CAAW5D,SAAS,CAACK,QAArB,EACZwD,GADY,CACR,CAAC,CAACC,IAAD,EAAOrD,OAAP,CAAD,KAAqB,CAACA,OAAO,CAACsD,IAAT,EAAeD,IAAf,CADb,EAEZE,MAFY,CAEJC,KAAD,IAAWf,QAAQ,CAACe,KAAK,CAAC,CAAD,CAAN,EAAWhB,QAAX,CAFd,EAGb;AACA;AACA;AALa,GAMZiB,IANY,CAMP,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAAC,CAAD,CAAD,CAAKC,MAAL,GAAcF,CAAC,CAAC,CAAD,CAAD,CAAKE,MANtB,CAAjB;;AAOA,MAAIhE,QAAQ,CAACgE,MAAT,KAAoB,CAAxB,EAA2B;AACvB,WAAO,IAAP;AACH,GAFD,MAGK,IAAIhE,QAAQ,CAACgE,MAAT,GAAkB,CAAtB,EAAyB;AAC1B,UAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;AACA,UAAMC,SAAS,GAAGnE,QAAQ,CAAC2D,MAAT,CAAiB/H,CAAD,IAAO;AACrC,UAAI,CAACqI,KAAK,CAACG,GAAN,CAAUxI,CAAC,CAAC,CAAD,CAAX,CAAL,EAAsB;AAClBqI,QAAAA,KAAK,CAACI,GAAN,CAAUzI,CAAC,CAAC,CAAD,CAAX;AACA,eAAO,KAAP;AACH;;AACD,aAAO,IAAP;AACH,KANiB,CAAlB;;AAOA,QAAIuI,SAAS,CAACH,MAAV,GAAmB,CAAvB,EAA0B;AACtB;AACA,aAAO,IAAP;AACH;AACJ;;AACD,SAAOhE,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CAAP;AACH;;AACD,SAASvD,eAAT,CAAyBkD,SAAzB,EAAoC;AAChC,MAAIA,SAAS,CAACK,QAAV,CAAmBsE,IAAnB,KAA4B,CAAhC,EAAmC;AAC/B;AACA,WAAOhB,KAAK,CAACC,IAAN,CAAW5D,SAAS,CAACK,QAAV,CAAmBuE,IAAnB,EAAX,EAAsC,CAAtC,CAAP;AACH;;AACD,QAAMnE,OAAO,GAAGuC,iBAAiB,CAAChD,SAAD,EAAYjB,OAAO,CAACQ,GAAR,EAAZ,CAAjC;;AACA,MAAIkB,OAAJ,EAAa;AACT,WAAOA,OAAP;AACH;;AACD,QAAMoE,cAAc,GAAG7E,SAAS,CAACI,UAAV,CAAqB,gBAArB,CAAvB;;AACA,MAAIyE,cAAc,IAAI,OAAOA,cAAP,KAA0B,QAAhD,EAA0D;AACtD;AACA,WAAOA,cAAP;AACH;;AACD,SAAO,IAAP;AACH;;AACDpI,OAAO,CAACK,eAAR,GAA0BA,eAA1B;;SACeD,2B;;;;;mDAAf,aAA6C;AACzC,QAAIiI,EAAJ;;AACA,UAAMC,iBAAiB,GAAIC,MAAD,IAAY;AAClC,UAAIpH,YAAY,CAACoH,MAAD,CAAhB,EAA0B;AACtB,cAAM9I,KAAK,GAAG8I,MAAM,CAAC,gBAAD,CAApB;;AACA,YAAI9I,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA9B,EAAwC;AACpC,iBAAOA,KAAP;AACH;AACJ;AACJ,KAPD;;AAQA,QAAIG,MAAJ;AACA,UAAM2D,SAAS,SAAS9C,YAAY,CAAC,OAAD,CAApC;;AACA,QAAI8C,SAAJ,EAAe;AACX,YAAMS,OAAO,GAAG3D,eAAe,CAACkD,SAAD,CAA/B;;AACA,UAAIS,OAAJ,EAAa;AACTpE,QAAAA,MAAM,GAAG0I,iBAAiB,CAAC,CAACD,EAAE,GAAG9E,SAAS,CAACK,QAAV,CAAmBvE,GAAnB,CAAuB2E,OAAvB,CAAN,MAA2C,IAA3C,IAAmDqE,EAAE,KAAK,KAAK,CAA/D,GAAmE,KAAK,CAAxE,GAA4EA,EAAE,CAAC1E,UAAH,CAAc,KAAd,CAA7E,CAA1B;AACH;;AACD/D,MAAAA,MAAM,GAAGA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuCA,MAAvC,GAAgD0I,iBAAiB,CAAC/E,SAAS,CAACI,UAAV,CAAqB,KAArB,CAAD,CAA1E;AACH;;AACD,QAAI/D,MAAM,KAAKd,SAAf,EAA0B;AACtB,YAAM0J,aAAa,SAAS/H,YAAY,CAAC,QAAD,CAAxC;AACAb,MAAAA,MAAM,GAAG0I,iBAAiB,CAACE,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,aAAa,CAAC7E,UAAd,CAAyB,KAAzB,CAA/D,CAA1B;;AACA,UAAI,CAACJ,SAAD,IAAc,CAACiF,aAAnB,EAAkC;AAC9B;AACA5I,QAAAA,MAAM,GAAG6I,uBAAuB,EAAhC;AACH;AACJ,KA1BwC,CA2BzC;;;AACA,WAAO7I,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuCA,MAAvC,GAAgD,IAAvD;AACH,G;;;;AACDI,OAAO,CAACI,2BAAR,GAAsCA,2BAAtC;;AACA,SAASD,yBAAT,GAAqC;AACjC,QAAMuI,OAAO,GAAG3H,EAAE,CAACiC,OAAH,EAAhB;;AACA,MAAI0F,OAAJ,EAAa;AACT,UAAMC,sBAAsB,GAAG3H,IAAI,CAACe,IAAL,CAAU2G,OAAV,EAAmB,mBAAnB,CAA/B;;AACA,QAAI,CAAC,GAAG5H,IAAI,CAACoC,UAAT,EAAqByF,sBAArB,CAAJ,EAAkD;AAC9C,YAAMC,MAAM,GAAG,CAAC,GAAG1H,WAAW,CAACuE,gBAAhB,EAAkCkD,sBAAlC,CAAf;;AACA,UAAI,CAACxH,YAAY,CAACyH,MAAD,CAAjB,EAA2B;AACvB,eAAO,KAAP;AACH;;AACD,YAAMC,GAAG,GAAG,EAAZ;;AACA,UAAID,MAAM,CAACE,cAAP,IACA,OAAOF,MAAM,CAACE,cAAd,IAAgC,QADhC,IAEAF,MAAM,CAACE,cAAP,KAA0B,SAF9B,EAEyC;AACrCD,QAAAA,GAAG,CAAC,gBAAD,CAAH,GAAwBD,MAAM,CAACE,cAA/B;AACH;;AACD,UAAI3H,YAAY,CAACyH,MAAM,CAACG,QAAR,CAAZ,IACA5H,YAAY,CAACyH,MAAM,CAACG,QAAP,CAAgBC,UAAjB,CADZ,IAEA,OAAOJ,MAAM,CAACG,QAAP,CAAgBC,UAAhB,CAA2BC,UAAlC,IAAgD,QAFpD,EAE8D;AAC1DJ,QAAAA,GAAG,CAAC,mBAAD,CAAH,GAA2BD,MAAM,CAACG,QAAP,CAAgBC,UAAhB,CAA2BC,UAAtD;AACH;;AACD,UAAI9H,YAAY,CAACyH,MAAM,CAACM,QAAR,CAAhB,EAAmC;AAC/B,cAAMA,QAAQ,GAAG,EAAjB;;AACA,YAAI,OAAON,MAAM,CAACM,QAAP,CAAgBC,eAAvB,IAA0C,SAA9C,EAAyD;AACrDD,UAAAA,QAAQ,CAAC,iBAAD,CAAR,GAA8BN,MAAM,CAACM,QAAP,CAAgBC,eAA9C;AACH;;AACD,YAAI3K,MAAM,CAAC4K,mBAAP,CAA2BF,QAA3B,EAAqCtB,MAArC,GAA8C,CAAlD,EAAqD;AACjDiB,UAAAA,GAAG,CAAC,UAAD,CAAH,GAAkBK,QAAlB;AACH;AACJ;;AACD,UAAI1K,MAAM,CAAC4K,mBAAP,CAA2BP,GAA3B,EAAgCjB,MAAhC,GAAyC,CAA7C,EAAgD;AAC5C,cAAMxC,UAAU,GAAGpE,IAAI,CAACe,IAAL,CAAU2G,OAAV,EAAmBxG,cAAnB,CAAnB;AACA,SAAC,GAAGpB,IAAI,CAACY,aAAT,EAAwB0D,UAAxB,EAAoCV,IAAI,CAACW,SAAL,CAAe;AAAEC,UAAAA,OAAO,EAAE,CAAX;AAAcuD,UAAAA;AAAd,SAAf,EAAoC,IAApC,EAA0C,CAA1C,CAApC;AACA,eAAO,IAAP;AACH;AACJ;AACJ;;AACD,SAAO,KAAP;AACH;;AACD7I,OAAO,CAACG,yBAAR,GAAoCA,yBAApC,C,CACA;;AACA,SAASsI,uBAAT,GAAmC;AAC/B,QAAMC,OAAO,GAAG3H,EAAE,CAACiC,OAAH,EAAhB;;AACA,MAAI0F,OAAJ,EAAa;AACT,UAAMC,sBAAsB,GAAG3H,IAAI,CAACe,IAAL,CAAU2G,OAAV,EAAmB,mBAAnB,CAA/B;;AACA,QAAI,CAAC,GAAG5H,IAAI,CAACoC,UAAT,EAAqByF,sBAArB,CAAJ,EAAkD;AAC9C,YAAMC,MAAM,GAAG,CAAC,GAAG1H,WAAW,CAACuE,gBAAhB,EAAkCkD,sBAAlC,CAAf;;AACA,UAAI,CAACxH,YAAY,CAACyH,MAAD,CAAjB,EAA2B;AACvB,eAAO,IAAP;AACH;;AACD,UAAIA,MAAM,CAACE,cAAP,IACA,OAAOF,MAAM,CAACE,cAAd,KAAiC,QADjC,IAEAF,MAAM,CAACE,cAAP,KAA0B,SAF9B,EAEyC;AACrC,eAAOF,MAAM,CAACE,cAAd;AACH;AACJ;AACJ;;AACD,SAAO,IAAP;AACH;;SACc5I,oB;;;;;4CAAf,WAAoC+I,UAApC,EAAgDI,SAAhD,EAA2DrF,OAA3D,EAAoE;AAChE,QAAIqE,EAAJ;;AACA,UAAMzI,MAAM,GAAG,EAAf;;AACA,UAAM0J,YAAY,GAAIf,MAAD,IAAY;AAC7B,UAAIpH,YAAY,CAACoH,MAAD,CAAhB,EAA0B;AACtB;AACA/J,QAAAA,MAAM,CAAC+K,MAAP,CAAc3J,MAAd,EAAsB2I,MAAM,CAAE,GAAEU,UAAW,IAAGI,SAAU,EAA5B,CAA5B,EAFsB,CAGtB;;AACA,cAAMG,iBAAiB,GAAGjB,MAAM,CAACU,UAAD,CAAhC;;AACA,YAAI9H,YAAY,CAACqI,iBAAD,CAAhB,EAAqC;AACjChL,UAAAA,MAAM,CAAC+K,MAAP,CAAc3J,MAAd,EAAsB4J,iBAAiB,CAACH,SAAD,CAAvC;AACH;AACJ;AACJ,KAVD,CAHgE,CAchE;;;AACA,UAAMb,aAAa,SAAS/H,YAAY,CAAC,QAAD,CAAxC;AACA6I,IAAAA,YAAY,CAACd,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,aAAa,CAAC7E,UAAd,CAAyB,YAAzB,CAA/D,CAAZ;AACA,UAAMJ,SAAS,SAAS9C,YAAY,CAAC,OAAD,CAApC;;AACA,QAAI8C,SAAJ,EAAe;AACX;AACA+F,MAAAA,YAAY,CAAC/F,SAAS,CAACI,UAAV,CAAqB,YAArB,CAAD,CAAZ;AACAK,MAAAA,OAAO,GAAGA,OAAO,IAAI3D,eAAe,CAACkD,SAAD,CAApC;;AACA,UAAIS,OAAJ,EAAa;AACT;AACAsF,QAAAA,YAAY,CAAC,CAACjB,EAAE,GAAG9E,SAAS,CAACK,QAAV,CAAmBvE,GAAnB,CAAuB2E,OAAvB,CAAN,MAA2C,IAA3C,IAAmDqE,EAAE,KAAK,KAAK,CAA/D,GAAmE,KAAK,CAAxE,GAA4EA,EAAE,CAAC1E,UAAH,CAAc,YAAd,CAA7E,CAAZ;AACH;AACJ;;AACD,WAAO/D,MAAP;AACH,G;;;;AACDI,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B;;SACeD,gB;;;;;wCAAf,WAAgCwJ,OAAhC,EAAyC;AACrC,QAAIpB,EAAJ;;AACA,UAAMqB,UAAU,GAAInB,MAAD,IAAY;AAC3B,UAAIpH,YAAY,CAACoH,MAAD,CAAhB,EAA0B;AACtB,cAAMW,QAAQ,GAAGX,MAAM,CAAC,UAAD,CAAvB;;AACA,YAAIpH,YAAY,CAAC+H,QAAD,CAAhB,EAA4B;AACxB,gBAAMzJ,KAAK,GAAGyJ,QAAQ,CAACO,OAAD,CAAtB;;AACA,cAAI,OAAOhK,KAAP,IAAgB,SAApB,EAA+B;AAC3B,mBAAOA,KAAP;AACH;AACJ;AACJ;AACJ,KAVD;;AAWA,QAAIG,MAAJ;AACA,UAAM2D,SAAS,SAAS9C,YAAY,CAAC,OAAD,CAApC;;AACA,QAAI8C,SAAJ,EAAe;AACX,YAAMS,OAAO,GAAG3D,eAAe,CAACkD,SAAD,CAA/B;;AACA,UAAIS,OAAJ,EAAa;AACTpE,QAAAA,MAAM,GAAG8J,UAAU,CAAC,CAACrB,EAAE,GAAG9E,SAAS,CAACK,QAAV,CAAmBvE,GAAnB,CAAuB2E,OAAvB,CAAN,MAA2C,IAA3C,IAAmDqE,EAAE,KAAK,KAAK,CAA/D,GAAmE,KAAK,CAAxE,GAA4EA,EAAE,CAAC1E,UAAH,CAAc,KAAd,CAA7E,CAAnB;AACH;;AACD/D,MAAAA,MAAM,GAAGA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuCA,MAAvC,GAAgD8J,UAAU,CAACnG,SAAS,CAACI,UAAV,CAAqB,KAArB,CAAD,CAAnE;AACH;;AACD,QAAI/D,MAAM,KAAKd,SAAf,EAA0B;AACtB,YAAM0J,aAAa,SAAS/H,YAAY,CAAC,QAAD,CAAxC;AACAb,MAAAA,MAAM,GAAG8J,UAAU,CAAClB,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,aAAa,CAAC7E,UAAd,CAAyB,KAAzB,CAA/D,CAAnB;AACH,KAzBoC,CA0BrC;;;AACA,WAAO/D,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuCA,MAAvC,GAAgD,IAAvD;AACH,G;;;;AACDI,OAAO,CAACC,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isWarningEnabled = exports.getSchematicDefaults = exports.migrateLegacyGlobalConfig = exports.getConfiguredPackageManager = exports.getProjectByCwd = exports.validateWorkspace = exports.getWorkspaceRaw = exports.createGlobalSettings = exports.getWorkspace = exports.AngularWorkspace = exports.workspaceSchemaPath = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst fs_1 = require(\"fs\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst find_up_1 = require(\"./find-up\");\nconst json_file_1 = require(\"./json-file\");\nfunction isJsonObject(value) {\n    return value !== undefined && core_1.json.isJsonObject(value);\n}\nfunction createWorkspaceHost() {\n    return {\n        async readFile(path) {\n            return (0, fs_1.readFileSync)(path, 'utf-8');\n        },\n        async writeFile(path, data) {\n            (0, fs_1.writeFileSync)(path, data);\n        },\n        async isDirectory(path) {\n            try {\n                return (0, fs_1.statSync)(path).isDirectory();\n            }\n            catch {\n                return false;\n            }\n        },\n        async isFile(path) {\n            try {\n                return (0, fs_1.statSync)(path).isFile();\n            }\n            catch {\n                return false;\n            }\n        },\n    };\n}\nfunction getSchemaLocation() {\n    return path.join(__dirname, '../lib/config/schema.json');\n}\nexports.workspaceSchemaPath = getSchemaLocation();\nconst configNames = ['angular.json', '.angular.json'];\nconst globalFileName = '.angular-config.json';\nfunction xdgConfigHome(home, configFile) {\n    // https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\n    const xdgConfigHome = process.env['XDG_CONFIG_HOME'] || path.join(home, '.config');\n    const xdgAngularHome = path.join(xdgConfigHome, 'angular');\n    return configFile ? path.join(xdgAngularHome, configFile) : xdgAngularHome;\n}\nfunction xdgConfigHomeOld(home) {\n    // Check the configuration files in the old location that should be:\n    // - $XDG_CONFIG_HOME/.angular-config.json (if XDG_CONFIG_HOME is set)\n    // - $HOME/.config/angular/.angular-config.json (otherwise)\n    const p = process.env['XDG_CONFIG_HOME'] || path.join(home, '.config', 'angular');\n    return path.join(p, '.angular-config.json');\n}\nfunction projectFilePath(projectPath) {\n    // Find the configuration, either where specified, in the Angular CLI project\n    // (if it's in node_modules) or from the current process.\n    return ((projectPath && (0, find_up_1.findUp)(configNames, projectPath)) ||\n        (0, find_up_1.findUp)(configNames, process.cwd()) ||\n        (0, find_up_1.findUp)(configNames, __dirname));\n}\nfunction globalFilePath() {\n    const home = os.homedir();\n    if (!home) {\n        return null;\n    }\n    // follow XDG Base Directory spec\n    // note that createGlobalSettings() will continue creating\n    // global file in home directory, with this user will have\n    // choice to move change its location to meet XDG convention\n    const xdgConfig = xdgConfigHome(home, 'config.json');\n    if ((0, fs_1.existsSync)(xdgConfig)) {\n        return xdgConfig;\n    }\n    // NOTE: This check is for the old configuration location, for more\n    // information see https://github.com/angular/angular-cli/pull/20556\n    const xdgConfigOld = xdgConfigHomeOld(home);\n    if ((0, fs_1.existsSync)(xdgConfigOld)) {\n        /* eslint-disable no-console */\n        console.warn(`Old configuration location detected: ${xdgConfigOld}\\n` +\n            `Please move the file to the new location ~/.config/angular/config.json`);\n        return xdgConfigOld;\n    }\n    const p = path.join(home, globalFileName);\n    if ((0, fs_1.existsSync)(p)) {\n        return p;\n    }\n    return null;\n}\nclass AngularWorkspace {\n    constructor(workspace, filePath) {\n        this.workspace = workspace;\n        this.filePath = filePath;\n        this.basePath = path.dirname(filePath);\n    }\n    get extensions() {\n        return this.workspace.extensions;\n    }\n    get projects() {\n        return this.workspace.projects;\n    }\n    // Temporary helper functions to support refactoring\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    getCli() {\n        return this.workspace.extensions['cli'] || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    getProjectCli(projectName) {\n        const project = this.workspace.projects.get(projectName);\n        return (project === null || project === void 0 ? void 0 : project.extensions['cli']) || {};\n    }\n    static async load(workspaceFilePath) {\n        const oldConfigFileNames = ['.angular-cli.json', 'angular-cli.json'];\n        if (oldConfigFileNames.includes(path.basename(workspaceFilePath))) {\n            // 1.x file format\n            // Create an empty workspace to allow update to be used\n            return new AngularWorkspace({ extensions: {}, projects: new core_1.workspaces.ProjectDefinitionCollection() }, workspaceFilePath);\n        }\n        const result = await core_1.workspaces.readWorkspace(workspaceFilePath, createWorkspaceHost(), core_1.workspaces.WorkspaceFormat.JSON);\n        return new AngularWorkspace(result.workspace, workspaceFilePath);\n    }\n}\nexports.AngularWorkspace = AngularWorkspace;\nconst cachedWorkspaces = new Map();\nasync function getWorkspace(level = 'local') {\n    const cached = cachedWorkspaces.get(level);\n    if (cached !== undefined) {\n        return cached;\n    }\n    const configPath = level === 'local' ? projectFilePath() : globalFilePath();\n    if (!configPath) {\n        cachedWorkspaces.set(level, null);\n        return null;\n    }\n    try {\n        const workspace = await AngularWorkspace.load(configPath);\n        cachedWorkspaces.set(level, workspace);\n        return workspace;\n    }\n    catch (error) {\n        throw new Error(`Workspace config file cannot be loaded: ${configPath}` +\n            `\\n${error instanceof Error ? error.message : error}`);\n    }\n}\nexports.getWorkspace = getWorkspace;\nfunction createGlobalSettings() {\n    const home = os.homedir();\n    if (!home) {\n        throw new Error('No home directory found.');\n    }\n    const globalPath = path.join(home, globalFileName);\n    (0, fs_1.writeFileSync)(globalPath, JSON.stringify({ version: 1 }));\n    return globalPath;\n}\nexports.createGlobalSettings = createGlobalSettings;\nfunction getWorkspaceRaw(level = 'local') {\n    let configPath = level === 'local' ? projectFilePath() : globalFilePath();\n    if (!configPath) {\n        if (level === 'global') {\n            configPath = createGlobalSettings();\n        }\n        else {\n            return [null, null];\n        }\n    }\n    return [new json_file_1.JSONFile(configPath), configPath];\n}\nexports.getWorkspaceRaw = getWorkspaceRaw;\nasync function validateWorkspace(data) {\n    const schema = (0, json_file_1.readAndParseJson)(path.join(__dirname, '../lib/config/schema.json'));\n    const { formats } = await Promise.resolve().then(() => __importStar(require('@angular-devkit/schematics')));\n    const registry = new core_1.json.schema.CoreSchemaRegistry(formats.standardFormats);\n    const validator = await registry.compile(schema).toPromise();\n    const { success, errors } = await validator(data).toPromise();\n    if (!success) {\n        throw new core_1.json.schema.SchemaValidationException(errors);\n    }\n}\nexports.validateWorkspace = validateWorkspace;\nfunction findProjectByPath(workspace, location) {\n    const isInside = (base, potential) => {\n        const absoluteBase = path.resolve(workspace.basePath, base);\n        const absolutePotential = path.resolve(workspace.basePath, potential);\n        const relativePotential = path.relative(absoluteBase, absolutePotential);\n        if (!relativePotential.startsWith('..') && !path.isAbsolute(relativePotential)) {\n            return true;\n        }\n        return false;\n    };\n    const projects = Array.from(workspace.projects)\n        .map(([name, project]) => [project.root, name])\n        .filter((tuple) => isInside(tuple[0], location))\n        // Sort tuples by depth, with the deeper ones first. Since the first member is a path and\n        // we filtered all invalid paths, the longest will be the deepest (and in case of equality\n        // the sort is stable and the first declared project will win).\n        .sort((a, b) => b[0].length - a[0].length);\n    if (projects.length === 0) {\n        return null;\n    }\n    else if (projects.length > 1) {\n        const found = new Set();\n        const sameRoots = projects.filter((v) => {\n            if (!found.has(v[0])) {\n                found.add(v[0]);\n                return false;\n            }\n            return true;\n        });\n        if (sameRoots.length > 0) {\n            // Ambiguous location - cannot determine a project\n            return null;\n        }\n    }\n    return projects[0][1];\n}\nfunction getProjectByCwd(workspace) {\n    if (workspace.projects.size === 1) {\n        // If there is only one project, return that one.\n        return Array.from(workspace.projects.keys())[0];\n    }\n    const project = findProjectByPath(workspace, process.cwd());\n    if (project) {\n        return project;\n    }\n    const defaultProject = workspace.extensions['defaultProject'];\n    if (defaultProject && typeof defaultProject === 'string') {\n        // If there is a default project name, return it.\n        return defaultProject;\n    }\n    return null;\n}\nexports.getProjectByCwd = getProjectByCwd;\nasync function getConfiguredPackageManager() {\n    var _a;\n    const getPackageManager = (source) => {\n        if (isJsonObject(source)) {\n            const value = source['packageManager'];\n            if (value && typeof value === 'string') {\n                return value;\n            }\n        }\n    };\n    let result;\n    const workspace = await getWorkspace('local');\n    if (workspace) {\n        const project = getProjectByCwd(workspace);\n        if (project) {\n            result = getPackageManager((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['cli']);\n        }\n        result = result !== null && result !== void 0 ? result : getPackageManager(workspace.extensions['cli']);\n    }\n    if (result === undefined) {\n        const globalOptions = await getWorkspace('global');\n        result = getPackageManager(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['cli']);\n        if (!workspace && !globalOptions) {\n            // Only check legacy if updated workspace is not found\n            result = getLegacyPackageManager();\n        }\n    }\n    // Default to null\n    return result !== null && result !== void 0 ? result : null;\n}\nexports.getConfiguredPackageManager = getConfiguredPackageManager;\nfunction migrateLegacyGlobalConfig() {\n    const homeDir = os.homedir();\n    if (homeDir) {\n        const legacyGlobalConfigPath = path.join(homeDir, '.angular-cli.json');\n        if ((0, fs_1.existsSync)(legacyGlobalConfigPath)) {\n            const legacy = (0, json_file_1.readAndParseJson)(legacyGlobalConfigPath);\n            if (!isJsonObject(legacy)) {\n                return false;\n            }\n            const cli = {};\n            if (legacy.packageManager &&\n                typeof legacy.packageManager == 'string' &&\n                legacy.packageManager !== 'default') {\n                cli['packageManager'] = legacy.packageManager;\n            }\n            if (isJsonObject(legacy.defaults) &&\n                isJsonObject(legacy.defaults.schematics) &&\n                typeof legacy.defaults.schematics.collection == 'string') {\n                cli['defaultCollection'] = legacy.defaults.schematics.collection;\n            }\n            if (isJsonObject(legacy.warnings)) {\n                const warnings = {};\n                if (typeof legacy.warnings.versionMismatch == 'boolean') {\n                    warnings['versionMismatch'] = legacy.warnings.versionMismatch;\n                }\n                if (Object.getOwnPropertyNames(warnings).length > 0) {\n                    cli['warnings'] = warnings;\n                }\n            }\n            if (Object.getOwnPropertyNames(cli).length > 0) {\n                const globalPath = path.join(homeDir, globalFileName);\n                (0, fs_1.writeFileSync)(globalPath, JSON.stringify({ version: 1, cli }, null, 2));\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexports.migrateLegacyGlobalConfig = migrateLegacyGlobalConfig;\n// Fallback, check for packageManager in config file in v1.* global config.\nfunction getLegacyPackageManager() {\n    const homeDir = os.homedir();\n    if (homeDir) {\n        const legacyGlobalConfigPath = path.join(homeDir, '.angular-cli.json');\n        if ((0, fs_1.existsSync)(legacyGlobalConfigPath)) {\n            const legacy = (0, json_file_1.readAndParseJson)(legacyGlobalConfigPath);\n            if (!isJsonObject(legacy)) {\n                return null;\n            }\n            if (legacy.packageManager &&\n                typeof legacy.packageManager === 'string' &&\n                legacy.packageManager !== 'default') {\n                return legacy.packageManager;\n            }\n        }\n    }\n    return null;\n}\nasync function getSchematicDefaults(collection, schematic, project) {\n    var _a;\n    const result = {};\n    const mergeOptions = (source) => {\n        if (isJsonObject(source)) {\n            // Merge options from the qualified name\n            Object.assign(result, source[`${collection}:${schematic}`]);\n            // Merge options from nested collection schematics\n            const collectionOptions = source[collection];\n            if (isJsonObject(collectionOptions)) {\n                Object.assign(result, collectionOptions[schematic]);\n            }\n        }\n    };\n    // Global level schematic options\n    const globalOptions = await getWorkspace('global');\n    mergeOptions(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['schematics']);\n    const workspace = await getWorkspace('local');\n    if (workspace) {\n        // Workspace level schematic options\n        mergeOptions(workspace.extensions['schematics']);\n        project = project || getProjectByCwd(workspace);\n        if (project) {\n            // Project level schematic options\n            mergeOptions((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['schematics']);\n        }\n    }\n    return result;\n}\nexports.getSchematicDefaults = getSchematicDefaults;\nasync function isWarningEnabled(warning) {\n    var _a;\n    const getWarning = (source) => {\n        if (isJsonObject(source)) {\n            const warnings = source['warnings'];\n            if (isJsonObject(warnings)) {\n                const value = warnings[warning];\n                if (typeof value == 'boolean') {\n                    return value;\n                }\n            }\n        }\n    };\n    let result;\n    const workspace = await getWorkspace('local');\n    if (workspace) {\n        const project = getProjectByCwd(workspace);\n        if (project) {\n            result = getWarning((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['cli']);\n        }\n        result = result !== null && result !== void 0 ? result : getWarning(workspace.extensions['cli']);\n    }\n    if (result === undefined) {\n        const globalOptions = await getWorkspace('global');\n        result = getWarning(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['cli']);\n    }\n    // All warnings are enabled by default\n    return result !== null && result !== void 0 ? result : true;\n}\nexports.isWarningEnabled = isWarningEnabled;\n"]},"metadata":{},"sourceType":"script"}