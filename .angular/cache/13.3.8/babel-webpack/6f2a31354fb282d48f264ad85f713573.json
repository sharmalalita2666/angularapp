{"ast":null,"code":"'use strict';\n\nconst _ = {\n  isFunction: require('lodash/isFunction')\n};\n\nconst {\n  from,\n  of\n} = require('rxjs');\n\nconst runAsync = require('run-async');\n/**\n * Resolve a question property value if it is passed as a function.\n * This method will overwrite the property on the question object with the received value.\n * @param  {Object} question - Question object\n * @param  {String} prop     - Property to fetch name\n * @param  {Object} answers  - Answers object\n * @return {Rx.Observable}   - Observable emitting once value is known\n */\n\n\nexports.fetchAsyncQuestionProperty = function (question, prop, answers) {\n  if (!_.isFunction(question[prop])) {\n    return of(question);\n  }\n\n  return from(runAsync(question[prop])(answers).then(value => {\n    question[prop] = value;\n    return question;\n  }));\n};","map":{"version":3,"sources":["/home/unthinkable-lap-0268/Documents/angularProject/node_modules/inquirer/lib/utils/utils.js"],"names":["_","isFunction","require","from","of","runAsync","exports","fetchAsyncQuestionProperty","question","prop","answers","then","value"],"mappings":"AAAA;;AACA,MAAMA,CAAC,GAAG;AACRC,EAAAA,UAAU,EAAEC,OAAO,CAAC,mBAAD;AADX,CAAV;;AAGA,MAAM;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,IAAeF,OAAO,CAAC,MAAD,CAA5B;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAI,OAAO,CAACC,0BAAR,GAAqC,UAAUC,QAAV,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmC;AACtE,MAAI,CAACV,CAAC,CAACC,UAAF,CAAaO,QAAQ,CAACC,IAAD,CAArB,CAAL,EAAmC;AACjC,WAAOL,EAAE,CAACI,QAAD,CAAT;AACD;;AAED,SAAOL,IAAI,CACTE,QAAQ,CAACG,QAAQ,CAACC,IAAD,CAAT,CAAR,CAAyBC,OAAzB,EAAkCC,IAAlC,CAAwCC,KAAD,IAAW;AAChDJ,IAAAA,QAAQ,CAACC,IAAD,CAAR,GAAiBG,KAAjB;AACA,WAAOJ,QAAP;AACD,GAHD,CADS,CAAX;AAMD,CAXD","sourcesContent":["'use strict';\nconst _ = {\n  isFunction: require('lodash/isFunction'),\n};\nconst { from, of } = require('rxjs');\nconst runAsync = require('run-async');\n\n/**\n * Resolve a question property value if it is passed as a function.\n * This method will overwrite the property on the question object with the received value.\n * @param  {Object} question - Question object\n * @param  {String} prop     - Property to fetch name\n * @param  {Object} answers  - Answers object\n * @return {Rx.Observable}   - Observable emitting once value is known\n */\n\nexports.fetchAsyncQuestionProperty = function (question, prop, answers) {\n  if (!_.isFunction(question[prop])) {\n    return of(question);\n  }\n\n  return from(\n    runAsync(question[prop])(answers).then((value) => {\n      question[prop] = value;\n      return question;\n    })\n  );\n};\n"]},"metadata":{},"sourceType":"script"}