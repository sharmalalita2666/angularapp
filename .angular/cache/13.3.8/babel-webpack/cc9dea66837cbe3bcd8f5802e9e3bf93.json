{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pathFormat = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nexports.pathFormat = {\n  name: 'path',\n  formatter: {\n    async: false,\n    validate: path => {\n      // Check path is normalized already.\n      return path === (0, core_1.normalize)(path); // TODO: check if path is valid (is that just checking if it's normalized?)\n      // TODO: check path is from root of schematics even if passed absolute\n      // TODO: error out if path is outside of host\n    }\n  }\n};","map":{"version":3,"sources":["/home/unthinkable-lap-0268/Documents/angularProject/node_modules/@angular-devkit/schematics/src/formats/path.js"],"names":["Object","defineProperty","exports","value","pathFormat","core_1","require","name","formatter","async","validate","path","normalize"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,sBAAD,CAAtB;;AACAJ,OAAO,CAACE,UAAR,GAAqB;AACjBG,EAAAA,IAAI,EAAE,MADW;AAEjBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,KAAK,EAAE,KADA;AAEPC,IAAAA,QAAQ,EAAGC,IAAD,IAAU;AAChB;AACA,aAAOA,IAAI,KAAK,CAAC,GAAGN,MAAM,CAACO,SAAX,EAAsBD,IAAtB,CAAhB,CAFgB,CAGhB;AACA;AACA;AACH;AARM;AAFM,CAArB","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pathFormat = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nexports.pathFormat = {\n    name: 'path',\n    formatter: {\n        async: false,\n        validate: (path) => {\n            // Check path is normalized already.\n            return path === (0, core_1.normalize)(path);\n            // TODO: check if path is valid (is that just checking if it's normalized?)\n            // TODO: check path is from root of schematics even if passed absolute\n            // TODO: error out if path is outside of host\n        },\n    },\n};\n"]},"metadata":{},"sourceType":"script"}