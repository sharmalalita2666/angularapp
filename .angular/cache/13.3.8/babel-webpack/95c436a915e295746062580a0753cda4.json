{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"/home/unthinkable-lap-0268/Documents/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AnalyticsCollector = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst child_process_1 = require(\"child_process\");\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst https = __importStar(require(\"https\"));\n\nconst os = __importStar(require(\"os\"));\n\nconst querystring = __importStar(require(\"querystring\"));\n\nconst version_1 = require(\"./version\");\n/**\n * See: https://developers.google.com/analytics/devguides/collection/protocol/v1/devguide\n */\n\n\nclass AnalyticsCollector {\n  constructor(trackingId, userId) {\n    this.trackingEventsQueue = [];\n    this.parameters = {};\n    this.analyticsLogDebug = (0, debug_1.default)('ng:analytics:log'); // API Version\n\n    this.parameters['v'] = '1'; // User ID\n\n    this.parameters['cid'] = userId; // Tracking\n\n    this.parameters['tid'] = trackingId;\n    this.parameters['ds'] = 'cli';\n    this.parameters['ua'] = _buildUserAgentString();\n    this.parameters['ul'] = _getLanguage(); // @angular/cli with version.\n\n    this.parameters['an'] = '@angular/cli';\n    this.parameters['av'] = version_1.VERSION.full; // We use the application ID for the Node version. This should be \"node v12.10.0\".\n\n    const nodeVersion = `node ${process.version}`;\n    this.parameters['aid'] = nodeVersion; // Custom dimentions\n    // We set custom metrics for values we care about.\n\n    this.parameters['cd' + core_1.analytics.NgCliAnalyticsDimensions.CpuCount] = os.cpus().length; // Get the first CPU's speed. It's very rare to have multiple CPUs of different speed (in most\n    // non-ARM configurations anyway), so that's all we care about.\n\n    this.parameters['cd' + core_1.analytics.NgCliAnalyticsDimensions.CpuSpeed] = Math.floor(os.cpus()[0].speed);\n    this.parameters['cd' + core_1.analytics.NgCliAnalyticsDimensions.RamInGigabytes] = Math.round(os.totalmem() / (1024 * 1024 * 1024));\n    this.parameters['cd' + core_1.analytics.NgCliAnalyticsDimensions.NodeVersion] = nodeVersion;\n    this.parameters['cd' + core_1.analytics.NgCliAnalyticsDimensions.AngularCLIMajorVersion] = version_1.VERSION.major;\n  }\n\n  event(ec, ea, options = {}) {\n    const {\n      label: el,\n      value: ev,\n      metrics,\n      dimensions\n    } = options;\n    this.addToQueue('event', {\n      ec,\n      ea,\n      el,\n      ev,\n      metrics,\n      dimensions\n    });\n  }\n\n  pageview(dp, options = {}) {\n    const {\n      hostname: dh,\n      title: dt,\n      metrics,\n      dimensions\n    } = options;\n    this.addToQueue('pageview', {\n      dp,\n      dh,\n      dt,\n      metrics,\n      dimensions\n    });\n  }\n\n  timing(utc, utv, utt, options = {}) {\n    const {\n      label: utl,\n      metrics,\n      dimensions\n    } = options;\n    this.addToQueue('timing', {\n      utc,\n      utv,\n      utt,\n      utl,\n      metrics,\n      dimensions\n    });\n  }\n\n  screenview(cd, an, options = {}) {\n    const {\n      appVersion: av,\n      appId: aid,\n      appInstallerId: aiid,\n      metrics,\n      dimensions\n    } = options;\n    this.addToQueue('screenview', {\n      cd,\n      an,\n      av,\n      aid,\n      aiid,\n      metrics,\n      dimensions\n    });\n  }\n\n  flush() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const pending = _this.trackingEventsQueue.length;\n\n      _this.analyticsLogDebug(`flush queue size: ${pending}`);\n\n      if (!pending) {\n        return;\n      } // The below is needed so that if flush is called multiple times,\n      // we don't report the same event multiple times.\n\n\n      const pendingTrackingEvents = _this.trackingEventsQueue;\n      _this.trackingEventsQueue = [];\n\n      try {\n        yield _this.send(pendingTrackingEvents);\n      } catch (error) {\n        // Failure to report analytics shouldn't crash the CLI.\n        _this.analyticsLogDebug('send error: %j', error);\n      }\n    })();\n  }\n\n  addToQueue(eventType, parameters) {\n    const {\n      metrics,\n      dimensions,\n      ...restParameters\n    } = parameters;\n    const data = { ...this.parameters,\n      ...restParameters,\n      ...this.customVariables({\n        metrics,\n        dimensions\n      }),\n      t: eventType\n    };\n    this.analyticsLogDebug('add event to queue: %j', data);\n    this.trackingEventsQueue.push(data);\n  }\n\n  send(data) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.analyticsLogDebug('send event: %j', data);\n\n      return new Promise((resolve, reject) => {\n        const request = https.request({\n          host: 'www.google-analytics.com',\n          method: 'POST',\n          path: data.length > 1 ? '/batch' : '/collect'\n        }, response => {\n          if (response.statusCode !== 200) {\n            reject(new Error(`Analytics reporting failed with status code: ${response.statusCode}.`));\n            return;\n          }\n        });\n        request.on('error', reject);\n        const queryParameters = data.map(p => querystring.stringify(p)).join('\\n');\n        request.write(queryParameters);\n        request.end(resolve);\n      });\n    })();\n  }\n  /**\n   * Creates the dimension and metrics variables to add to the queue.\n   * @private\n   */\n\n\n  customVariables(options) {\n    const additionals = {};\n    const {\n      dimensions,\n      metrics\n    } = options;\n    dimensions === null || dimensions === void 0 ? void 0 : dimensions.forEach((v, i) => additionals[`cd${i}`] = v);\n    metrics === null || metrics === void 0 ? void 0 : metrics.forEach((v, i) => additionals[`cm${i}`] = v);\n    return additionals;\n  }\n\n}\n\nexports.AnalyticsCollector = AnalyticsCollector; // These are just approximations of UA strings. We just try to fool Google Analytics to give us the\n// data we want.\n// See https://developers.whatismybrowser.com/useragents/\n\nconst osVersionMap = {\n  darwin: {\n    '1.3.1': '10_0_4',\n    '1.4.1': '10_1_0',\n    '5.1': '10_1_1',\n    '5.2': '10_1_5',\n    '6.0.1': '10_2',\n    '6.8': '10_2_8',\n    '7.0': '10_3_0',\n    '7.9': '10_3_9',\n    '8.0': '10_4_0',\n    '8.11': '10_4_11',\n    '9.0': '10_5_0',\n    '9.8': '10_5_8',\n    '10.0': '10_6_0',\n    '10.8': '10_6_8' // We stop here because we try to math out the version for anything greater than 10, and it\n    // works. Those versions are standardized using a calculation now.\n\n  },\n  win32: {\n    '6.3.9600': 'Windows 8.1',\n    '6.2.9200': 'Windows 8',\n    '6.1.7601': 'Windows 7 SP1',\n    '6.1.7600': 'Windows 7',\n    '6.0.6002': 'Windows Vista SP2',\n    '6.0.6000': 'Windows Vista',\n    '5.1.2600': 'Windows XP'\n  }\n};\n/**\n * Build a fake User Agent string. This gets sent to Analytics so it shows the proper OS version.\n * @private\n */\n\nfunction _buildUserAgentString() {\n  switch (os.platform()) {\n    case 'darwin':\n      {\n        let v = osVersionMap.darwin[os.release()];\n\n        if (!v) {\n          // Remove 4 to tie Darwin version to OSX version, add other info.\n          const x = parseFloat(os.release());\n\n          if (x > 10) {\n            v = `10_` + (x - 4).toString().replace('.', '_');\n          }\n        }\n\n        const cpuModel = os.cpus()[0].model.match(/^[a-z]+/i);\n        const cpu = cpuModel ? cpuModel[0] : os.cpus()[0].model;\n        return `(Macintosh; ${cpu} Mac OS X ${v || os.release()})`;\n      }\n\n    case 'win32':\n      return `(Windows NT ${os.release()})`;\n\n    case 'linux':\n      return `(X11; Linux i686; ${os.release()}; ${os.cpus()[0].model})`;\n\n    default:\n      return os.platform() + ' ' + os.release();\n  }\n}\n/**\n * Get a language code.\n * @private\n */\n\n\nfunction _getLanguage() {\n  // Note: Windows does not expose the configured language by default.\n  return process.env.LANG || // Default Unix env variable.\n  process.env.LC_CTYPE || // For C libraries. Sometimes the above isn't set.\n  process.env.LANGSPEC || // For Windows, sometimes this will be set (not always).\n  _getWindowsLanguageCode() || '??'; // ¯\\_(ツ)_/¯\n}\n/**\n * Attempt to get the Windows Language Code string.\n * @private\n */\n\n\nfunction _getWindowsLanguageCode() {\n  if (!os.platform().startsWith('win')) {\n    return undefined;\n  }\n\n  try {\n    // This is true on Windows XP, 7, 8 and 10 AFAIK. Would return empty string or fail if it\n    // doesn't work.\n    return (0, child_process_1.execSync)('wmic.exe os get locale').toString().trim();\n  } catch {}\n\n  return undefined;\n}","map":{"version":3,"sources":["/home/unthinkable-lap-0268/Documents/angularProject/node_modules/@angular/cli/models/analytics-collector.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","AnalyticsCollector","core_1","require","child_process_1","debug_1","https","os","querystring","version_1","constructor","trackingId","userId","trackingEventsQueue","parameters","analyticsLogDebug","default","_buildUserAgentString","_getLanguage","VERSION","full","nodeVersion","process","version","analytics","NgCliAnalyticsDimensions","CpuCount","cpus","length","CpuSpeed","Math","floor","speed","RamInGigabytes","round","totalmem","NodeVersion","AngularCLIMajorVersion","major","event","ec","ea","options","label","el","ev","metrics","dimensions","addToQueue","pageview","dp","hostname","dh","title","dt","timing","utc","utv","utt","utl","screenview","cd","an","appVersion","av","appId","aid","appInstallerId","aiid","flush","pending","pendingTrackingEvents","send","error","eventType","restParameters","data","customVariables","t","push","Promise","resolve","reject","request","host","method","path","response","statusCode","Error","on","queryParameters","map","p","stringify","join","write","end","additionals","forEach","i","osVersionMap","darwin","win32","platform","release","x","parseFloat","toString","replace","cpuModel","model","match","cpu","env","LANG","LC_CTYPE","LANGSPEC","_getWindowsLanguageCode","startsWith","execSync","trim"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AnalyticsCollector = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst child_process_1 = require(\"child_process\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst https = __importStar(require(\"https\"));\nconst os = __importStar(require(\"os\"));\nconst querystring = __importStar(require(\"querystring\"));\nconst version_1 = require(\"./version\");\n/**\n * See: https://developers.google.com/analytics/devguides/collection/protocol/v1/devguide\n */\nclass AnalyticsCollector {\n    constructor(trackingId, userId) {\n        this.trackingEventsQueue = [];\n        this.parameters = {};\n        this.analyticsLogDebug = (0, debug_1.default)('ng:analytics:log');\n        // API Version\n        this.parameters['v'] = '1';\n        // User ID\n        this.parameters['cid'] = userId;\n        // Tracking\n        this.parameters['tid'] = trackingId;\n        this.parameters['ds'] = 'cli';\n        this.parameters['ua'] = _buildUserAgentString();\n        this.parameters['ul'] = _getLanguage();\n        // @angular/cli with version.\n        this.parameters['an'] = '@angular/cli';\n        this.parameters['av'] = version_1.VERSION.full;\n        // We use the application ID for the Node version. This should be \"node v12.10.0\".\n        const nodeVersion = `node ${process.version}`;\n        this.parameters['aid'] = nodeVersion;\n        // Custom dimentions\n        // We set custom metrics for values we care about.\n        this.parameters['cd' + core_1.analytics.NgCliAnalyticsDimensions.CpuCount] = os.cpus().length;\n        // Get the first CPU's speed. It's very rare to have multiple CPUs of different speed (in most\n        // non-ARM configurations anyway), so that's all we care about.\n        this.parameters['cd' + core_1.analytics.NgCliAnalyticsDimensions.CpuSpeed] = Math.floor(os.cpus()[0].speed);\n        this.parameters['cd' + core_1.analytics.NgCliAnalyticsDimensions.RamInGigabytes] = Math.round(os.totalmem() / (1024 * 1024 * 1024));\n        this.parameters['cd' + core_1.analytics.NgCliAnalyticsDimensions.NodeVersion] = nodeVersion;\n        this.parameters['cd' + core_1.analytics.NgCliAnalyticsDimensions.AngularCLIMajorVersion] =\n            version_1.VERSION.major;\n    }\n    event(ec, ea, options = {}) {\n        const { label: el, value: ev, metrics, dimensions } = options;\n        this.addToQueue('event', { ec, ea, el, ev, metrics, dimensions });\n    }\n    pageview(dp, options = {}) {\n        const { hostname: dh, title: dt, metrics, dimensions } = options;\n        this.addToQueue('pageview', { dp, dh, dt, metrics, dimensions });\n    }\n    timing(utc, utv, utt, options = {}) {\n        const { label: utl, metrics, dimensions } = options;\n        this.addToQueue('timing', { utc, utv, utt, utl, metrics, dimensions });\n    }\n    screenview(cd, an, options = {}) {\n        const { appVersion: av, appId: aid, appInstallerId: aiid, metrics, dimensions } = options;\n        this.addToQueue('screenview', { cd, an, av, aid, aiid, metrics, dimensions });\n    }\n    async flush() {\n        const pending = this.trackingEventsQueue.length;\n        this.analyticsLogDebug(`flush queue size: ${pending}`);\n        if (!pending) {\n            return;\n        }\n        // The below is needed so that if flush is called multiple times,\n        // we don't report the same event multiple times.\n        const pendingTrackingEvents = this.trackingEventsQueue;\n        this.trackingEventsQueue = [];\n        try {\n            await this.send(pendingTrackingEvents);\n        }\n        catch (error) {\n            // Failure to report analytics shouldn't crash the CLI.\n            this.analyticsLogDebug('send error: %j', error);\n        }\n    }\n    addToQueue(eventType, parameters) {\n        const { metrics, dimensions, ...restParameters } = parameters;\n        const data = {\n            ...this.parameters,\n            ...restParameters,\n            ...this.customVariables({ metrics, dimensions }),\n            t: eventType,\n        };\n        this.analyticsLogDebug('add event to queue: %j', data);\n        this.trackingEventsQueue.push(data);\n    }\n    async send(data) {\n        this.analyticsLogDebug('send event: %j', data);\n        return new Promise((resolve, reject) => {\n            const request = https.request({\n                host: 'www.google-analytics.com',\n                method: 'POST',\n                path: data.length > 1 ? '/batch' : '/collect',\n            }, (response) => {\n                if (response.statusCode !== 200) {\n                    reject(new Error(`Analytics reporting failed with status code: ${response.statusCode}.`));\n                    return;\n                }\n            });\n            request.on('error', reject);\n            const queryParameters = data.map((p) => querystring.stringify(p)).join('\\n');\n            request.write(queryParameters);\n            request.end(resolve);\n        });\n    }\n    /**\n     * Creates the dimension and metrics variables to add to the queue.\n     * @private\n     */\n    customVariables(options) {\n        const additionals = {};\n        const { dimensions, metrics } = options;\n        dimensions === null || dimensions === void 0 ? void 0 : dimensions.forEach((v, i) => (additionals[`cd${i}`] = v));\n        metrics === null || metrics === void 0 ? void 0 : metrics.forEach((v, i) => (additionals[`cm${i}`] = v));\n        return additionals;\n    }\n}\nexports.AnalyticsCollector = AnalyticsCollector;\n// These are just approximations of UA strings. We just try to fool Google Analytics to give us the\n// data we want.\n// See https://developers.whatismybrowser.com/useragents/\nconst osVersionMap = {\n    darwin: {\n        '1.3.1': '10_0_4',\n        '1.4.1': '10_1_0',\n        '5.1': '10_1_1',\n        '5.2': '10_1_5',\n        '6.0.1': '10_2',\n        '6.8': '10_2_8',\n        '7.0': '10_3_0',\n        '7.9': '10_3_9',\n        '8.0': '10_4_0',\n        '8.11': '10_4_11',\n        '9.0': '10_5_0',\n        '9.8': '10_5_8',\n        '10.0': '10_6_0',\n        '10.8': '10_6_8',\n        // We stop here because we try to math out the version for anything greater than 10, and it\n        // works. Those versions are standardized using a calculation now.\n    },\n    win32: {\n        '6.3.9600': 'Windows 8.1',\n        '6.2.9200': 'Windows 8',\n        '6.1.7601': 'Windows 7 SP1',\n        '6.1.7600': 'Windows 7',\n        '6.0.6002': 'Windows Vista SP2',\n        '6.0.6000': 'Windows Vista',\n        '5.1.2600': 'Windows XP',\n    },\n};\n/**\n * Build a fake User Agent string. This gets sent to Analytics so it shows the proper OS version.\n * @private\n */\nfunction _buildUserAgentString() {\n    switch (os.platform()) {\n        case 'darwin': {\n            let v = osVersionMap.darwin[os.release()];\n            if (!v) {\n                // Remove 4 to tie Darwin version to OSX version, add other info.\n                const x = parseFloat(os.release());\n                if (x > 10) {\n                    v = `10_` + (x - 4).toString().replace('.', '_');\n                }\n            }\n            const cpuModel = os.cpus()[0].model.match(/^[a-z]+/i);\n            const cpu = cpuModel ? cpuModel[0] : os.cpus()[0].model;\n            return `(Macintosh; ${cpu} Mac OS X ${v || os.release()})`;\n        }\n        case 'win32':\n            return `(Windows NT ${os.release()})`;\n        case 'linux':\n            return `(X11; Linux i686; ${os.release()}; ${os.cpus()[0].model})`;\n        default:\n            return os.platform() + ' ' + os.release();\n    }\n}\n/**\n * Get a language code.\n * @private\n */\nfunction _getLanguage() {\n    // Note: Windows does not expose the configured language by default.\n    return (process.env.LANG || // Default Unix env variable.\n        process.env.LC_CTYPE || // For C libraries. Sometimes the above isn't set.\n        process.env.LANGSPEC || // For Windows, sometimes this will be set (not always).\n        _getWindowsLanguageCode() ||\n        '??'); // ¯\\_(ツ)_/¯\n}\n/**\n * Attempt to get the Windows Language Code string.\n * @private\n */\nfunction _getWindowsLanguageCode() {\n    if (!os.platform().startsWith('win')) {\n        return undefined;\n    }\n    try {\n        // This is true on Windows XP, 7, 8 and 10 AFAIK. Would return empty string or fail if it\n        // doesn't work.\n        return (0, child_process_1.execSync)('wmic.exe os get locale').toString().trim();\n    }\n    catch { }\n    return undefined;\n}\n"]},"metadata":{},"sourceType":"script"}