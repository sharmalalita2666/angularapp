{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"/home/unthinkable-lap-0268/Documents/angularProject/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSharedAnalytics = exports.getWorkspaceAnalytics = exports.hasWorkspaceAnalyticsConfiguration = exports.getGlobalAnalytics = exports.hasGlobalAnalyticsConfiguration = exports.promptProjectAnalytics = exports.promptGlobalAnalytics = exports.setAnalyticsConfig = exports.isPackageNameSafeForAnalytics = exports.analyticsPackageSafelist = exports.AnalyticsProperties = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst inquirer = __importStar(require(\"inquirer\"));\n\nconst uuid_1 = require(\"uuid\");\n\nconst version_1 = require(\"../models/version\");\n\nconst color_1 = require(\"../utilities/color\");\n\nconst config_1 = require(\"../utilities/config\");\n\nconst tty_1 = require(\"../utilities/tty\");\n\nconst analytics_collector_1 = require(\"./analytics-collector\");\n/* eslint-disable no-console */\n\n\nconst analyticsDebug = (0, debug_1.default)('ng:analytics'); // Generate analytics, including settings and users.\n\nlet _defaultAngularCliPropertyCache;\n\nexports.AnalyticsProperties = {\n  AngularCliProd: 'UA-8594346-29',\n  AngularCliStaging: 'UA-8594346-32',\n\n  get AngularCliDefault() {\n    if (_defaultAngularCliPropertyCache) {\n      return _defaultAngularCliPropertyCache;\n    }\n\n    const v = version_1.VERSION.full; // The logic is if it's a full version then we should use the prod GA property.\n\n    if (/^\\d+\\.\\d+\\.\\d+$/.test(v) && v !== '0.0.0') {\n      _defaultAngularCliPropertyCache = exports.AnalyticsProperties.AngularCliProd;\n    } else {\n      _defaultAngularCliPropertyCache = exports.AnalyticsProperties.AngularCliStaging;\n    }\n\n    return _defaultAngularCliPropertyCache;\n  }\n\n};\n/**\n * This is the ultimate safelist for checking if a package name is safe to report to analytics.\n */\n\nexports.analyticsPackageSafelist = [/^@angular\\//, /^@angular-devkit\\//, /^@ngtools\\//, '@schematics/angular'];\n\nfunction isPackageNameSafeForAnalytics(name) {\n  return exports.analyticsPackageSafelist.some(pattern => {\n    if (typeof pattern == 'string') {\n      return pattern === name;\n    } else {\n      return pattern.test(name);\n    }\n  });\n}\n\nexports.isPackageNameSafeForAnalytics = isPackageNameSafeForAnalytics;\n/**\n * Set analytics settings. This does not work if the user is not inside a project.\n * @param level Which config to use. \"global\" for user-level, and \"local\" for project-level.\n * @param value Either a user ID, true to generate a new User ID, or false to disable analytics.\n */\n\nfunction setAnalyticsConfig(level, value) {\n  analyticsDebug('setting %s level analytics to: %s', level, value);\n  const [config, configPath] = (0, config_1.getWorkspaceRaw)(level);\n\n  if (!config || !configPath) {\n    throw new Error(`Could not find ${level} workspace.`);\n  }\n\n  const cli = config.get(['cli']);\n\n  if (cli !== undefined && !core_1.json.isJsonObject(cli)) {\n    throw new Error(`Invalid config found at ${configPath}. CLI should be an object.`);\n  }\n\n  if (value === true) {\n    value = (0, uuid_1.v4)();\n  }\n\n  config.modify(['cli', 'analytics'], value);\n  config.save();\n  analyticsDebug('done');\n}\n\nexports.setAnalyticsConfig = setAnalyticsConfig;\n/**\n * Prompt the user for usage gathering permission.\n * @param force Whether to ask regardless of whether or not the user is using an interactive shell.\n * @return Whether or not the user was shown a prompt.\n */\n\nfunction promptGlobalAnalytics() {\n  return _promptGlobalAnalytics.apply(this, arguments);\n}\n\nfunction _promptGlobalAnalytics() {\n  _promptGlobalAnalytics = _asyncToGenerator(function* (force = false) {\n    analyticsDebug('prompting global analytics.');\n\n    if (force || (0, tty_1.isTTY)()) {\n      const answers = yield inquirer.prompt([{\n        type: 'confirm',\n        name: 'analytics',\n        message: core_1.tags.stripIndents`\n          Would you like to share anonymous usage data with the Angular Team at Google under\n          Google’s Privacy Policy at https://policies.google.com/privacy? For more details and\n          how to change this setting, see https://angular.io/analytics.\n        `,\n        default: false\n      }]);\n      setAnalyticsConfig('global', answers.analytics);\n\n      if (answers.analytics) {\n        console.log('');\n        console.log(core_1.tags.stripIndent`\n        Thank you for sharing anonymous usage data. If you change your mind, the following\n        command will disable this feature entirely:\n\n            ${color_1.colors.yellow('ng analytics off')}\n      `);\n        console.log(''); // Send back a ping with the user `optin`.\n\n        const ua = new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, 'optin');\n        ua.pageview('/telemetry/optin');\n        yield ua.flush();\n      } else {\n        // Send back a ping with the user `optout`. This is the only thing we send.\n        const ua = new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, 'optout');\n        ua.pageview('/telemetry/optout');\n        yield ua.flush();\n      }\n\n      return true;\n    } else {\n      analyticsDebug('Either STDOUT or STDIN are not TTY and we skipped the prompt.');\n    }\n\n    return false;\n  });\n  return _promptGlobalAnalytics.apply(this, arguments);\n}\n\nexports.promptGlobalAnalytics = promptGlobalAnalytics;\n/**\n * Prompt the user for usage gathering permission for the local project. Fails if there is no\n * local workspace.\n * @param force Whether to ask regardless of whether or not the user is using an interactive shell.\n * @return Whether or not the user was shown a prompt.\n */\n\nfunction promptProjectAnalytics() {\n  return _promptProjectAnalytics.apply(this, arguments);\n}\n\nfunction _promptProjectAnalytics() {\n  _promptProjectAnalytics = _asyncToGenerator(function* (force = false) {\n    analyticsDebug('prompting user');\n    const [config, configPath] = (0, config_1.getWorkspaceRaw)('local');\n\n    if (!config || !configPath) {\n      throw new Error(`Could not find a local workspace. Are you in a project?`);\n    }\n\n    if (force || (0, tty_1.isTTY)()) {\n      const answers = yield inquirer.prompt([{\n        type: 'confirm',\n        name: 'analytics',\n        message: core_1.tags.stripIndents`\n          Would you like to share anonymous usage data about this project with the Angular Team at\n          Google under Google’s Privacy Policy at https://policies.google.com/privacy? For more\n          details and how to change this setting, see https://angular.io/analytics.\n\n        `,\n        default: false\n      }]);\n      setAnalyticsConfig('local', answers.analytics);\n\n      if (answers.analytics) {\n        console.log('');\n        console.log(core_1.tags.stripIndent`\n        Thank you for sharing anonymous usage data. Should you change your mind, the following\n        command will disable this feature entirely:\n\n            ${color_1.colors.yellow('ng analytics project off')}\n      `);\n        console.log(''); // Send back a ping with the user `optin`.\n\n        const ua = new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, 'optin');\n        ua.pageview('/telemetry/project/optin');\n        yield ua.flush();\n      } else {\n        // Send back a ping with the user `optout`. This is the only thing we send.\n        const ua = new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, 'optout');\n        ua.pageview('/telemetry/project/optout');\n        yield ua.flush();\n      }\n\n      return true;\n    }\n\n    return false;\n  });\n  return _promptProjectAnalytics.apply(this, arguments);\n}\n\nexports.promptProjectAnalytics = promptProjectAnalytics;\n\nfunction hasGlobalAnalyticsConfiguration() {\n  return _hasGlobalAnalyticsConfiguration.apply(this, arguments);\n}\n\nfunction _hasGlobalAnalyticsConfiguration() {\n  _hasGlobalAnalyticsConfiguration = _asyncToGenerator(function* () {\n    try {\n      const globalWorkspace = yield (0, config_1.getWorkspace)('global');\n      const analyticsConfig = globalWorkspace && globalWorkspace.getCli() && globalWorkspace.getCli()['analytics'];\n\n      if (analyticsConfig !== null && analyticsConfig !== undefined) {\n        return true;\n      }\n    } catch {}\n\n    return false;\n  });\n  return _hasGlobalAnalyticsConfiguration.apply(this, arguments);\n}\n\nexports.hasGlobalAnalyticsConfiguration = hasGlobalAnalyticsConfiguration;\n/**\n * Get the global analytics object for the user. This returns an instance of UniversalAnalytics,\n * or undefined if analytics are disabled.\n *\n * If any problem happens, it is considered the user has been opting out of analytics.\n */\n\nfunction getGlobalAnalytics() {\n  return _getGlobalAnalytics.apply(this, arguments);\n}\n\nfunction _getGlobalAnalytics() {\n  _getGlobalAnalytics = _asyncToGenerator(function* () {\n    analyticsDebug('getGlobalAnalytics');\n    const propertyId = exports.AnalyticsProperties.AngularCliDefault;\n\n    if ('NG_CLI_ANALYTICS' in process.env) {\n      if (process.env['NG_CLI_ANALYTICS'] == 'false' || process.env['NG_CLI_ANALYTICS'] == '') {\n        analyticsDebug('NG_CLI_ANALYTICS is false');\n        return undefined;\n      }\n\n      if (process.env['NG_CLI_ANALYTICS'] === 'ci') {\n        analyticsDebug('Running in CI mode');\n        return new analytics_collector_1.AnalyticsCollector(propertyId, 'ci');\n      }\n    } // If anything happens we just keep the NOOP analytics.\n\n\n    try {\n      const globalWorkspace = yield (0, config_1.getWorkspace)('global');\n      const analyticsConfig = globalWorkspace && globalWorkspace.getCli() && globalWorkspace.getCli()['analytics'];\n      analyticsDebug('Client Analytics config found: %j', analyticsConfig);\n\n      if (analyticsConfig === false) {\n        analyticsDebug('Analytics disabled. Ignoring all analytics.');\n        return undefined;\n      } else if (analyticsConfig === undefined || analyticsConfig === null) {\n        analyticsDebug('Analytics settings not found. Ignoring all analytics.'); // globalWorkspace can be null if there is no file. analyticsConfig would be null in this\n        // case. Since there is no file, the user hasn't answered and the expected return value is\n        // undefined.\n\n        return undefined;\n      } else {\n        let uid = undefined;\n\n        if (typeof analyticsConfig == 'string') {\n          uid = analyticsConfig;\n        } else if (typeof analyticsConfig == 'object' && typeof analyticsConfig['uid'] == 'string') {\n          uid = analyticsConfig['uid'];\n        }\n\n        analyticsDebug('client id: %j', uid);\n\n        if (uid == undefined) {\n          return undefined;\n        }\n\n        return new analytics_collector_1.AnalyticsCollector(propertyId, uid);\n      }\n    } catch (err) {\n      analyticsDebug('Error happened during reading of analytics config: %s', err.message);\n      return undefined;\n    }\n  });\n  return _getGlobalAnalytics.apply(this, arguments);\n}\n\nexports.getGlobalAnalytics = getGlobalAnalytics;\n\nfunction hasWorkspaceAnalyticsConfiguration() {\n  return _hasWorkspaceAnalyticsConfiguration.apply(this, arguments);\n}\n\nfunction _hasWorkspaceAnalyticsConfiguration() {\n  _hasWorkspaceAnalyticsConfiguration = _asyncToGenerator(function* () {\n    try {\n      const globalWorkspace = yield (0, config_1.getWorkspace)('local');\n      const analyticsConfig = globalWorkspace && globalWorkspace.getCli() && globalWorkspace.getCli()['analytics'];\n\n      if (analyticsConfig !== undefined) {\n        return true;\n      }\n    } catch {}\n\n    return false;\n  });\n  return _hasWorkspaceAnalyticsConfiguration.apply(this, arguments);\n}\n\nexports.hasWorkspaceAnalyticsConfiguration = hasWorkspaceAnalyticsConfiguration;\n/**\n * Get the workspace analytics object for the user. This returns an instance of AnalyticsCollector,\n * or undefined if analytics are disabled.\n *\n * If any problem happens, it is considered the user has been opting out of analytics.\n */\n\nfunction getWorkspaceAnalytics() {\n  return _getWorkspaceAnalytics.apply(this, arguments);\n}\n\nfunction _getWorkspaceAnalytics() {\n  _getWorkspaceAnalytics = _asyncToGenerator(function* () {\n    analyticsDebug('getWorkspaceAnalytics');\n\n    try {\n      const globalWorkspace = yield (0, config_1.getWorkspace)('local');\n      const analyticsConfig = globalWorkspace === null || globalWorkspace === void 0 ? void 0 : globalWorkspace.getCli()['analytics'];\n      analyticsDebug('Workspace Analytics config found: %j', analyticsConfig);\n\n      if (analyticsConfig === false) {\n        analyticsDebug('Analytics disabled. Ignoring all analytics.');\n        return undefined;\n      } else if (analyticsConfig === undefined || analyticsConfig === null) {\n        analyticsDebug('Analytics settings not found. Ignoring all analytics.');\n        return undefined;\n      } else {\n        let uid = undefined;\n\n        if (typeof analyticsConfig == 'string') {\n          uid = analyticsConfig;\n        } else if (typeof analyticsConfig == 'object' && typeof analyticsConfig['uid'] == 'string') {\n          uid = analyticsConfig['uid'];\n        }\n\n        analyticsDebug('client id: %j', uid);\n\n        if (uid == undefined) {\n          return undefined;\n        }\n\n        return new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, uid);\n      }\n    } catch (err) {\n      analyticsDebug('Error happened during reading of analytics config: %s', err.message);\n      return undefined;\n    }\n  });\n  return _getWorkspaceAnalytics.apply(this, arguments);\n}\n\nexports.getWorkspaceAnalytics = getWorkspaceAnalytics;\n/**\n * Return the usage analytics sharing setting, which is either a property string (GA-XXXXXXX-XX),\n * or undefined if no sharing.\n */\n\nfunction getSharedAnalytics() {\n  return _getSharedAnalytics.apply(this, arguments);\n}\n\nfunction _getSharedAnalytics() {\n  _getSharedAnalytics = _asyncToGenerator(function* () {\n    analyticsDebug('getSharedAnalytics');\n    const envVarName = 'NG_CLI_ANALYTICS_SHARE';\n\n    if (envVarName in process.env) {\n      if (process.env[envVarName] == 'false' || process.env[envVarName] == '') {\n        analyticsDebug('NG_CLI_ANALYTICS is false');\n        return undefined;\n      }\n    } // If anything happens we just keep the NOOP analytics.\n\n\n    try {\n      const globalWorkspace = yield (0, config_1.getWorkspace)('global');\n      const analyticsConfig = globalWorkspace === null || globalWorkspace === void 0 ? void 0 : globalWorkspace.getCli()['analyticsSharing'];\n\n      if (!analyticsConfig || !analyticsConfig.tracking || !analyticsConfig.uuid) {\n        return undefined;\n      } else {\n        analyticsDebug('Analytics sharing info: %j', analyticsConfig);\n        return new analytics_collector_1.AnalyticsCollector(analyticsConfig.tracking, analyticsConfig.uuid);\n      }\n    } catch (err) {\n      analyticsDebug('Error happened during reading of analytics sharing config: %s', err.message);\n      return undefined;\n    }\n  });\n  return _getSharedAnalytics.apply(this, arguments);\n}\n\nexports.getSharedAnalytics = getSharedAnalytics;","map":{"version":3,"sources":["/home/unthinkable-lap-0268/Documents/angularProject/node_modules/@angular/cli/models/analytics.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","getSharedAnalytics","getWorkspaceAnalytics","hasWorkspaceAnalyticsConfiguration","getGlobalAnalytics","hasGlobalAnalyticsConfiguration","promptProjectAnalytics","promptGlobalAnalytics","setAnalyticsConfig","isPackageNameSafeForAnalytics","analyticsPackageSafelist","AnalyticsProperties","core_1","require","debug_1","inquirer","uuid_1","version_1","color_1","config_1","tty_1","analytics_collector_1","analyticsDebug","default","_defaultAngularCliPropertyCache","AngularCliProd","AngularCliStaging","AngularCliDefault","VERSION","full","test","name","some","pattern","level","config","configPath","getWorkspaceRaw","Error","cli","json","isJsonObject","v4","modify","save","force","isTTY","answers","prompt","type","message","tags","stripIndents","analytics","console","log","stripIndent","colors","yellow","ua","AnalyticsCollector","pageview","flush","globalWorkspace","getWorkspace","analyticsConfig","getCli","propertyId","process","env","uid","err","envVarName","tracking","uuid"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSharedAnalytics = exports.getWorkspaceAnalytics = exports.hasWorkspaceAnalyticsConfiguration = exports.getGlobalAnalytics = exports.hasGlobalAnalyticsConfiguration = exports.promptProjectAnalytics = exports.promptGlobalAnalytics = exports.setAnalyticsConfig = exports.isPackageNameSafeForAnalytics = exports.analyticsPackageSafelist = exports.AnalyticsProperties = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst inquirer = __importStar(require(\"inquirer\"));\nconst uuid_1 = require(\"uuid\");\nconst version_1 = require(\"../models/version\");\nconst color_1 = require(\"../utilities/color\");\nconst config_1 = require(\"../utilities/config\");\nconst tty_1 = require(\"../utilities/tty\");\nconst analytics_collector_1 = require(\"./analytics-collector\");\n/* eslint-disable no-console */\nconst analyticsDebug = (0, debug_1.default)('ng:analytics'); // Generate analytics, including settings and users.\nlet _defaultAngularCliPropertyCache;\nexports.AnalyticsProperties = {\n    AngularCliProd: 'UA-8594346-29',\n    AngularCliStaging: 'UA-8594346-32',\n    get AngularCliDefault() {\n        if (_defaultAngularCliPropertyCache) {\n            return _defaultAngularCliPropertyCache;\n        }\n        const v = version_1.VERSION.full;\n        // The logic is if it's a full version then we should use the prod GA property.\n        if (/^\\d+\\.\\d+\\.\\d+$/.test(v) && v !== '0.0.0') {\n            _defaultAngularCliPropertyCache = exports.AnalyticsProperties.AngularCliProd;\n        }\n        else {\n            _defaultAngularCliPropertyCache = exports.AnalyticsProperties.AngularCliStaging;\n        }\n        return _defaultAngularCliPropertyCache;\n    },\n};\n/**\n * This is the ultimate safelist for checking if a package name is safe to report to analytics.\n */\nexports.analyticsPackageSafelist = [\n    /^@angular\\//,\n    /^@angular-devkit\\//,\n    /^@ngtools\\//,\n    '@schematics/angular',\n];\nfunction isPackageNameSafeForAnalytics(name) {\n    return exports.analyticsPackageSafelist.some((pattern) => {\n        if (typeof pattern == 'string') {\n            return pattern === name;\n        }\n        else {\n            return pattern.test(name);\n        }\n    });\n}\nexports.isPackageNameSafeForAnalytics = isPackageNameSafeForAnalytics;\n/**\n * Set analytics settings. This does not work if the user is not inside a project.\n * @param level Which config to use. \"global\" for user-level, and \"local\" for project-level.\n * @param value Either a user ID, true to generate a new User ID, or false to disable analytics.\n */\nfunction setAnalyticsConfig(level, value) {\n    analyticsDebug('setting %s level analytics to: %s', level, value);\n    const [config, configPath] = (0, config_1.getWorkspaceRaw)(level);\n    if (!config || !configPath) {\n        throw new Error(`Could not find ${level} workspace.`);\n    }\n    const cli = config.get(['cli']);\n    if (cli !== undefined && !core_1.json.isJsonObject(cli)) {\n        throw new Error(`Invalid config found at ${configPath}. CLI should be an object.`);\n    }\n    if (value === true) {\n        value = (0, uuid_1.v4)();\n    }\n    config.modify(['cli', 'analytics'], value);\n    config.save();\n    analyticsDebug('done');\n}\nexports.setAnalyticsConfig = setAnalyticsConfig;\n/**\n * Prompt the user for usage gathering permission.\n * @param force Whether to ask regardless of whether or not the user is using an interactive shell.\n * @return Whether or not the user was shown a prompt.\n */\nasync function promptGlobalAnalytics(force = false) {\n    analyticsDebug('prompting global analytics.');\n    if (force || (0, tty_1.isTTY)()) {\n        const answers = await inquirer.prompt([\n            {\n                type: 'confirm',\n                name: 'analytics',\n                message: core_1.tags.stripIndents `\n          Would you like to share anonymous usage data with the Angular Team at Google under\n          Google’s Privacy Policy at https://policies.google.com/privacy? For more details and\n          how to change this setting, see https://angular.io/analytics.\n        `,\n                default: false,\n            },\n        ]);\n        setAnalyticsConfig('global', answers.analytics);\n        if (answers.analytics) {\n            console.log('');\n            console.log(core_1.tags.stripIndent `\n        Thank you for sharing anonymous usage data. If you change your mind, the following\n        command will disable this feature entirely:\n\n            ${color_1.colors.yellow('ng analytics off')}\n      `);\n            console.log('');\n            // Send back a ping with the user `optin`.\n            const ua = new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, 'optin');\n            ua.pageview('/telemetry/optin');\n            await ua.flush();\n        }\n        else {\n            // Send back a ping with the user `optout`. This is the only thing we send.\n            const ua = new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, 'optout');\n            ua.pageview('/telemetry/optout');\n            await ua.flush();\n        }\n        return true;\n    }\n    else {\n        analyticsDebug('Either STDOUT or STDIN are not TTY and we skipped the prompt.');\n    }\n    return false;\n}\nexports.promptGlobalAnalytics = promptGlobalAnalytics;\n/**\n * Prompt the user for usage gathering permission for the local project. Fails if there is no\n * local workspace.\n * @param force Whether to ask regardless of whether or not the user is using an interactive shell.\n * @return Whether or not the user was shown a prompt.\n */\nasync function promptProjectAnalytics(force = false) {\n    analyticsDebug('prompting user');\n    const [config, configPath] = (0, config_1.getWorkspaceRaw)('local');\n    if (!config || !configPath) {\n        throw new Error(`Could not find a local workspace. Are you in a project?`);\n    }\n    if (force || (0, tty_1.isTTY)()) {\n        const answers = await inquirer.prompt([\n            {\n                type: 'confirm',\n                name: 'analytics',\n                message: core_1.tags.stripIndents `\n          Would you like to share anonymous usage data about this project with the Angular Team at\n          Google under Google’s Privacy Policy at https://policies.google.com/privacy? For more\n          details and how to change this setting, see https://angular.io/analytics.\n\n        `,\n                default: false,\n            },\n        ]);\n        setAnalyticsConfig('local', answers.analytics);\n        if (answers.analytics) {\n            console.log('');\n            console.log(core_1.tags.stripIndent `\n        Thank you for sharing anonymous usage data. Should you change your mind, the following\n        command will disable this feature entirely:\n\n            ${color_1.colors.yellow('ng analytics project off')}\n      `);\n            console.log('');\n            // Send back a ping with the user `optin`.\n            const ua = new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, 'optin');\n            ua.pageview('/telemetry/project/optin');\n            await ua.flush();\n        }\n        else {\n            // Send back a ping with the user `optout`. This is the only thing we send.\n            const ua = new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, 'optout');\n            ua.pageview('/telemetry/project/optout');\n            await ua.flush();\n        }\n        return true;\n    }\n    return false;\n}\nexports.promptProjectAnalytics = promptProjectAnalytics;\nasync function hasGlobalAnalyticsConfiguration() {\n    try {\n        const globalWorkspace = await (0, config_1.getWorkspace)('global');\n        const analyticsConfig = globalWorkspace && globalWorkspace.getCli() && globalWorkspace.getCli()['analytics'];\n        if (analyticsConfig !== null && analyticsConfig !== undefined) {\n            return true;\n        }\n    }\n    catch { }\n    return false;\n}\nexports.hasGlobalAnalyticsConfiguration = hasGlobalAnalyticsConfiguration;\n/**\n * Get the global analytics object for the user. This returns an instance of UniversalAnalytics,\n * or undefined if analytics are disabled.\n *\n * If any problem happens, it is considered the user has been opting out of analytics.\n */\nasync function getGlobalAnalytics() {\n    analyticsDebug('getGlobalAnalytics');\n    const propertyId = exports.AnalyticsProperties.AngularCliDefault;\n    if ('NG_CLI_ANALYTICS' in process.env) {\n        if (process.env['NG_CLI_ANALYTICS'] == 'false' || process.env['NG_CLI_ANALYTICS'] == '') {\n            analyticsDebug('NG_CLI_ANALYTICS is false');\n            return undefined;\n        }\n        if (process.env['NG_CLI_ANALYTICS'] === 'ci') {\n            analyticsDebug('Running in CI mode');\n            return new analytics_collector_1.AnalyticsCollector(propertyId, 'ci');\n        }\n    }\n    // If anything happens we just keep the NOOP analytics.\n    try {\n        const globalWorkspace = await (0, config_1.getWorkspace)('global');\n        const analyticsConfig = globalWorkspace && globalWorkspace.getCli() && globalWorkspace.getCli()['analytics'];\n        analyticsDebug('Client Analytics config found: %j', analyticsConfig);\n        if (analyticsConfig === false) {\n            analyticsDebug('Analytics disabled. Ignoring all analytics.');\n            return undefined;\n        }\n        else if (analyticsConfig === undefined || analyticsConfig === null) {\n            analyticsDebug('Analytics settings not found. Ignoring all analytics.');\n            // globalWorkspace can be null if there is no file. analyticsConfig would be null in this\n            // case. Since there is no file, the user hasn't answered and the expected return value is\n            // undefined.\n            return undefined;\n        }\n        else {\n            let uid = undefined;\n            if (typeof analyticsConfig == 'string') {\n                uid = analyticsConfig;\n            }\n            else if (typeof analyticsConfig == 'object' && typeof analyticsConfig['uid'] == 'string') {\n                uid = analyticsConfig['uid'];\n            }\n            analyticsDebug('client id: %j', uid);\n            if (uid == undefined) {\n                return undefined;\n            }\n            return new analytics_collector_1.AnalyticsCollector(propertyId, uid);\n        }\n    }\n    catch (err) {\n        analyticsDebug('Error happened during reading of analytics config: %s', err.message);\n        return undefined;\n    }\n}\nexports.getGlobalAnalytics = getGlobalAnalytics;\nasync function hasWorkspaceAnalyticsConfiguration() {\n    try {\n        const globalWorkspace = await (0, config_1.getWorkspace)('local');\n        const analyticsConfig = globalWorkspace && globalWorkspace.getCli() && globalWorkspace.getCli()['analytics'];\n        if (analyticsConfig !== undefined) {\n            return true;\n        }\n    }\n    catch { }\n    return false;\n}\nexports.hasWorkspaceAnalyticsConfiguration = hasWorkspaceAnalyticsConfiguration;\n/**\n * Get the workspace analytics object for the user. This returns an instance of AnalyticsCollector,\n * or undefined if analytics are disabled.\n *\n * If any problem happens, it is considered the user has been opting out of analytics.\n */\nasync function getWorkspaceAnalytics() {\n    analyticsDebug('getWorkspaceAnalytics');\n    try {\n        const globalWorkspace = await (0, config_1.getWorkspace)('local');\n        const analyticsConfig = globalWorkspace === null || globalWorkspace === void 0 ? void 0 : globalWorkspace.getCli()['analytics'];\n        analyticsDebug('Workspace Analytics config found: %j', analyticsConfig);\n        if (analyticsConfig === false) {\n            analyticsDebug('Analytics disabled. Ignoring all analytics.');\n            return undefined;\n        }\n        else if (analyticsConfig === undefined || analyticsConfig === null) {\n            analyticsDebug('Analytics settings not found. Ignoring all analytics.');\n            return undefined;\n        }\n        else {\n            let uid = undefined;\n            if (typeof analyticsConfig == 'string') {\n                uid = analyticsConfig;\n            }\n            else if (typeof analyticsConfig == 'object' && typeof analyticsConfig['uid'] == 'string') {\n                uid = analyticsConfig['uid'];\n            }\n            analyticsDebug('client id: %j', uid);\n            if (uid == undefined) {\n                return undefined;\n            }\n            return new analytics_collector_1.AnalyticsCollector(exports.AnalyticsProperties.AngularCliDefault, uid);\n        }\n    }\n    catch (err) {\n        analyticsDebug('Error happened during reading of analytics config: %s', err.message);\n        return undefined;\n    }\n}\nexports.getWorkspaceAnalytics = getWorkspaceAnalytics;\n/**\n * Return the usage analytics sharing setting, which is either a property string (GA-XXXXXXX-XX),\n * or undefined if no sharing.\n */\nasync function getSharedAnalytics() {\n    analyticsDebug('getSharedAnalytics');\n    const envVarName = 'NG_CLI_ANALYTICS_SHARE';\n    if (envVarName in process.env) {\n        if (process.env[envVarName] == 'false' || process.env[envVarName] == '') {\n            analyticsDebug('NG_CLI_ANALYTICS is false');\n            return undefined;\n        }\n    }\n    // If anything happens we just keep the NOOP analytics.\n    try {\n        const globalWorkspace = await (0, config_1.getWorkspace)('global');\n        const analyticsConfig = globalWorkspace === null || globalWorkspace === void 0 ? void 0 : globalWorkspace.getCli()['analyticsSharing'];\n        if (!analyticsConfig || !analyticsConfig.tracking || !analyticsConfig.uuid) {\n            return undefined;\n        }\n        else {\n            analyticsDebug('Analytics sharing info: %j', analyticsConfig);\n            return new analytics_collector_1.AnalyticsCollector(analyticsConfig.tracking, analyticsConfig.uuid);\n        }\n    }\n    catch (err) {\n        analyticsDebug('Error happened during reading of analytics sharing config: %s', err.message);\n        return undefined;\n    }\n}\nexports.getSharedAnalytics = getSharedAnalytics;\n"]},"metadata":{},"sourceType":"script"}